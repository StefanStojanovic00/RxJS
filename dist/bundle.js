(()=>{"use strict";var n,t,e;!function(n){n[n.Veca=0]="Veca",n[n.Manja=1]="Manja"}(n||(n={})),function(n){n[n.Leva=0]="Leva",n[n.Desna=1]="Desna"}(t||(t={})),function(n){n[n.Trenutni=0]="Trenutni",n[n.Max=1]="Max"}(e||(e={}));var r=function(n,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])},r(n,t)};function o(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}function i(n,t){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(e=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(n,u)}catch(n){c=[6,n],r=0}finally{e=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}function u(n){var t="function"==typeof Symbol&&Symbol.iterator,e=t&&n[t],r=0;if(e)return e.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(n,t){var e="function"==typeof Symbol&&n[Symbol.iterator];if(!e)return n;var r,o,i=e.call(n),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function s(n,t,e){if(e||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return n.concat(r||Array.prototype.slice.call(t))}function a(n){return this instanceof a?(this.v=n,this):new a(n)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var l=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function f(n){return"function"==typeof n}function h(n){return f(null==n?void 0:n.then)}function d(n){var t=n((function(n){Error.call(n),n.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var p=d((function(n){return function(t){n(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(n,t){return t+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function v(n,t){if(n){var e=n.indexOf(t);0<=e&&n.splice(e,1)}}var y=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._finalizers=null}return n.prototype.unsubscribe=function(){var n,t,e,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var a=u(i),l=a.next();!l.done;l=a.next())l.value.remove(this)}catch(t){n={error:t}}finally{try{l&&!l.done&&(t=a.return)&&t.call(a)}finally{if(n)throw n.error}}else i.remove(this);var h=this.initialTeardown;if(f(h))try{h()}catch(n){o=n instanceof p?n.errors:[n]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var v=u(d),y=v.next();!y.done;y=v.next()){var b=y.value;try{w(b)}catch(n){o=null!=o?o:[],n instanceof p?o=s(s([],c(o)),c(n.errors)):o.push(n)}}}catch(n){e={error:n}}finally{try{y&&!y.done&&(r=v.return)&&r.call(v)}finally{if(e)throw e.error}}}if(o)throw new p(o)}},n.prototype.add=function(t){var e;if(t&&t!==this)if(this.closed)w(t);else{if(t instanceof n){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(t)}},n.prototype._hasParent=function(n){var t=this._parentage;return t===n||Array.isArray(t)&&t.includes(n)},n.prototype._addParent=function(n){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(n),t):t?[t,n]:n},n.prototype._removeParent=function(n){var t=this._parentage;t===n?this._parentage=null:Array.isArray(t)&&v(t,n)},n.prototype.remove=function(t){var e=this._finalizers;e&&v(e,t),t instanceof n&&t._removeParent(this)},n.EMPTY=((t=new n).closed=!0,t),n;var t}(),b=y.EMPTY;function m(n){return n instanceof y||n&&"closed"in n&&f(n.remove)&&f(n.add)&&f(n.unsubscribe)}function w(n){f(n)?n():n.unsubscribe()}var g={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},S={setTimeout:function(n,t){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=S.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,s([n,t],c(e))):setTimeout.apply(void 0,s([n,t],c(e)))},clearTimeout:function(n){var t=S.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(n)},delegate:void 0};function x(n){S.setTimeout((function(){var t=g.onUnhandledError;if(!t)throw n;t(n)}))}function _(){}var I=E("C",void 0,void 0);function E(n,t,e){return{kind:n,value:t,error:e}}var T=null;function A(n){if(g.useDeprecatedSynchronousErrorHandling){var t=!T;if(t&&(T={errorThrown:!1,error:null}),n(),t){var e=T,r=e.errorThrown,o=e.error;if(T=null,r)throw o}}else n()}var L=function(n){function t(t){var e=n.call(this)||this;return e.isStopped=!1,t?(e.destination=t,m(t)&&t.add(e)):e.destination=H,e}return o(t,n),t.create=function(n,t,e){return new P(n,t,e)},t.prototype.next=function(n){this.isStopped?O(function(n){return E("N",n,void 0)}(n),this):this._next(n)},t.prototype.error=function(n){this.isStopped?O(E("E",void 0,n),this):(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped?O(I,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(y),k=Function.prototype.bind;function M(n,t){return k.call(n,t)}var j=function(){function n(n){this.partialObserver=n}return n.prototype.next=function(n){var t=this.partialObserver;if(t.next)try{t.next(n)}catch(n){D(n)}},n.prototype.error=function(n){var t=this.partialObserver;if(t.error)try{t.error(n)}catch(n){D(n)}else D(n)},n.prototype.complete=function(){var n=this.partialObserver;if(n.complete)try{n.complete()}catch(n){D(n)}},n}(),P=function(n){function t(t,e,r){var o,i,u=n.call(this)||this;return f(t)||!t?o={next:null!=t?t:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:u&&g.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&M(t.next,i),error:t.error&&M(t.error,i),complete:t.complete&&M(t.complete,i)}):o=t,u.destination=new j(o),u}return o(t,n),t}(L);function D(n){var t;g.useDeprecatedSynchronousErrorHandling?(t=n,g.useDeprecatedSynchronousErrorHandling&&T&&(T.errorThrown=!0,T.error=t)):x(n)}function O(n,t){var e=g.onStoppedNotification;e&&S.setTimeout((function(){return e(n,t)}))}var H={closed:!0,next:_,error:function(n){throw n},complete:_},B="function"==typeof Symbol&&Symbol.observable||"@@observable";function C(n){return n}var U=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(t){var e=new n;return e.source=this,e.operator=t,e},n.prototype.subscribe=function(n,t,e){var r,o=this,i=(r=n)&&r instanceof L||function(n){return n&&f(n.next)&&f(n.error)&&f(n.complete)}(r)&&m(r)?n:new P(n,t,e);return A((function(){var n=o,t=n.operator,e=n.source;i.add(t?t.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(t){n.error(t)}},n.prototype.forEach=function(n,t){var e=this;return new(t=z(t))((function(t,r){var o=new P({next:function(t){try{n(t)}catch(n){r(n),o.unsubscribe()}},error:r,complete:t});e.subscribe(o)}))},n.prototype._subscribe=function(n){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(n)},n.prototype[B]=function(){return this},n.prototype.pipe=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return(0===(e=n).length?C:1===e.length?e[0]:function(n){return e.reduce((function(n,t){return t(n)}),n)})(this);var e},n.prototype.toPromise=function(n){var t=this;return new(n=z(n))((function(n,e){var r;t.subscribe((function(n){return r=n}),(function(n){return e(n)}),(function(){return n(r)}))}))},n.create=function(t){return new n(t)},n}();function z(n){var t;return null!==(t=null!=n?n:g.Promise)&&void 0!==t?t:Promise}function R(n){return f(n[B])}function N(n){return Symbol.asyncIterator&&f(null==n?void 0:n[Symbol.asyncIterator])}function V(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var F="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Y(n){return f(null==n?void 0:n[F])}function G(n){return function(n,t,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(n,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(n){o[n]&&(r[n]=function(t){return new Promise((function(e,r){i.push([n,t,e,r])>1||c(n,t)}))})}function c(n,t){try{(e=o[n](t)).value instanceof a?Promise.resolve(e.value.v).then(s,l):f(i[0][2],e)}catch(n){f(i[0][3],n)}var e}function s(n){c("next",n)}function l(n){c("throw",n)}function f(n,t){n(t),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var t,e,r;return i(this,(function(o){switch(o.label){case 0:t=n.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,a(t.read())];case 3:return e=o.sent(),r=e.value,e.done?[4,a(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,a(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function q(n){return f(null==n?void 0:n.getReader)}function K(n){if(n instanceof U)return n;if(null!=n){if(R(n))return o=n,new U((function(n){var t=o[B]();if(f(t.subscribe))return t.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(l(n))return r=n,new U((function(n){for(var t=0;t<r.length&&!n.closed;t++)n.next(r[t]);n.complete()}));if(h(n))return e=n,new U((function(n){e.then((function(t){n.closed||(n.next(t),n.complete())}),(function(t){return n.error(t)})).then(null,x)}));if(N(n))return J(n);if(Y(n))return t=n,new U((function(n){var e,r;try{for(var o=u(t),i=o.next();!i.done;i=o.next()){var c=i.value;if(n.next(c),n.closed)return}}catch(n){e={error:n}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}n.complete()}));if(q(n))return J(G(n))}var t,e,r,o;throw V(n)}function J(n){return new U((function(t){(function(n,t){var e,r,o,c,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),e=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,e=n[Symbol.asyncIterator];return e?e.call(n):(n=u(n),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(e){t[e]=n[e]&&function(t){return new Promise((function(r,o){!function(n,t,e,r){Promise.resolve(r).then((function(t){n({value:t,done:e})}),t)}(r,o,(t=n[e](t)).done,t.value)}))}}}(n),i.label=1;case 1:return[4,e.next()];case 2:if((r=i.sent()).done)return[3,4];if(s=r.value,t.next(s),t.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=i.sent(),o={error:a},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(c=e.return)?[4,c.call(e)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(n,t){function e(n){try{o(f.next(n))}catch(n){t(n)}}function r(n){try{o(f.throw(n))}catch(n){t(n)}}function o(t){var o;t.done?n(t.value):(o=t.value,o instanceof l?o:new l((function(n){n(o)}))).then(e,r)}o((f=f.apply(s,a||[])).next())}))})(n,t).catch((function(n){return t.error(n)}))}))}function Q(n){return function(t){if(function(n){return f(null==n?void 0:n.lift)}(t))return t.lift((function(t){try{return n(t,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}function W(n,t,e,r,o){return new X(n,t,e,r,o)}var X=function(n){function t(t,e,r,o,i,u){var c=n.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=e?function(n){try{e(n)}catch(n){t.error(n)}}:n.prototype._next,c._error=o?function(n){try{o(n)}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._error,c._complete=r?function(){try{r()}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,c}return o(t,n),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;n.prototype.unsubscribe.call(this),!e&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(L);function Z(n,t){return Q((function(e,r){var o=0;e.subscribe(W(r,(function(e){r.next(n.call(t,e,o++))})))}))}function $(n,t,e,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){e(),o?n.add(this.schedule(null,r)):this.unsubscribe()}),r);if(n.add(i),!o)return i}function nn(n,t,e){return void 0===e&&(e=1/0),f(t)?nn((function(e,r){return Z((function(n,o){return t(e,n,r,o)}))(K(n(e,r)))}),e):("number"==typeof t&&(e=t),Q((function(t,r){return function(n,t,e,r,o,i,u,c){var s=[],a=0,l=0,f=!1,h=function(){!f||s.length||a||t.complete()},d=function(n){return a<r?p(n):s.push(n)},p=function(n){a++;var o=!1;K(e(n,l++)).subscribe(W(t,(function(n){t.next(n)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<r;)n=void 0,n=s.shift(),p(n);h()}catch(n){t.error(n)}var n})))};return n.subscribe(W(t,d,(function(){f=!0,h()}))),function(){}}(t,r,n,e)})))}var tn=Array.isArray;var en=["addListener","removeListener"],rn=["addEventListener","removeEventListener"],on=["on","off"];function un(n,t,e,r){if(f(e)&&(r=e,e=void 0),r)return un(n,t,e).pipe((o=r,Z((function(n){return function(n,t){return tn(t)?n.apply(void 0,s([],c(t))):n(t)}(o,n)}))));var o,i=c(function(n){return f(n.addEventListener)&&f(n.removeEventListener)}(n)?rn.map((function(r){return function(o){return n[r](t,o,e)}})):function(n){return f(n.addListener)&&f(n.removeListener)}(n)?en.map(cn(n,t)):function(n){return f(n.on)&&f(n.off)}(n)?on.map(cn(n,t)):[],2),u=i[0],a=i[1];if(!u&&l(n))return nn((function(n){return un(n,t,e)}))(K(n));if(!u)throw new TypeError("Invalid event target");return new U((function(n){var t=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1<t.length?t:t[0])};return u(t),function(){return a(t)}}))}function cn(n,t){return function(e){return function(r){return n[e](t,r)}}}var sn=new U((function(n){return n.complete()}));function an(n){return n[n.length-1]}function ln(n){return(t=an(n))&&f(t.schedule)?n.pop():void 0;var t}function fn(n,t){return void 0===t&&(t=0),Q((function(e,r){e.subscribe(W(r,(function(e){return $(r,n,(function(){return r.next(e)}),t)}),(function(){return $(r,n,(function(){return r.complete()}),t)}),(function(e){return $(r,n,(function(){return r.error(e)}),t)})))}))}function hn(n,t){return void 0===t&&(t=0),Q((function(e,r){r.add(n.schedule((function(){return e.subscribe(r)}),t))}))}function dn(n,t){if(!n)throw new Error("Iterable cannot be null");return new U((function(e){$(e,t,(function(){var r=n[Symbol.asyncIterator]();$(e,t,(function(){r.next().then((function(n){n.done?e.complete():e.next(n.value)}))}),0,!0)}))}))}function pn(n,t){return t?function(n,t){if(null!=n){if(R(n))return function(n,t){return K(n).pipe(hn(t),fn(t))}(n,t);if(l(n))return function(n,t){return new U((function(e){var r=0;return t.schedule((function(){r===n.length?e.complete():(e.next(n[r++]),e.closed||this.schedule())}))}))}(n,t);if(h(n))return function(n,t){return K(n).pipe(hn(t),fn(t))}(n,t);if(N(n))return dn(n,t);if(Y(n))return function(n,t){return new U((function(e){var r;return $(e,t,(function(){r=n[F](),$(e,t,(function(){var n,t,o;try{t=(n=r.next()).value,o=n.done}catch(n){return void e.error(n)}o?e.complete():e.next(t)}),0,!0)})),function(){return f(null==r?void 0:r.return)&&r.return()}}))}(n,t);if(q(n))return function(n,t){return dn(G(n),t)}(n,t)}throw V(n)}(n,t):K(n)}function vn(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=ln(n),r=function(n,t){return"number"==typeof an(n)?n.pop():1/0}(n),o=n;return o.length?1===o.length?K(o[0]):function(n){return void 0===n&&(n=1/0),nn(C,n)}(r)(pn(o,e)):sn}var yn=function(n){function t(t,e){return n.call(this)||this}return o(t,n),t.prototype.schedule=function(n,t){return void 0===t&&(t=0),this},t}(y),bn={setInterval:function(n,t){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=bn.delegate;return(null==o?void 0:o.setInterval)?o.setInterval.apply(o,s([n,t],c(e))):setInterval.apply(void 0,s([n,t],c(e)))},clearInterval:function(n){var t=bn.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(n)},delegate:void 0},mn=function(n){function t(t,e){var r=n.call(this,t,e)||this;return r.scheduler=t,r.work=e,r.pending=!1,r}return o(t,n),t.prototype.schedule=function(n,t){var e;if(void 0===t&&(t=0),this.closed)return this;this.state=n;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,t)),this.pending=!0,this.delay=t,this.id=null!==(e=this.id)&&void 0!==e?e:this.requestAsyncId(o,this.id,t),this},t.prototype.requestAsyncId=function(n,t,e){return void 0===e&&(e=0),bn.setInterval(n.flush.bind(n,this),e)},t.prototype.recycleAsyncId=function(n,t,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return t;null!=t&&bn.clearInterval(t)},t.prototype.execute=function(n,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(n,t);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(n,t){var e,r=!1;try{this.work(n)}catch(n){r=!0,e=n||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,v(r,this),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},t}(yn),wn={now:function(){return(wn.delegate||Date).now()},delegate:void 0},gn=function(){function n(t,e){void 0===e&&(e=n.now),this.schedulerActionCtor=t,this.now=e}return n.prototype.schedule=function(n,t,e){return void 0===t&&(t=0),new this.schedulerActionCtor(this,n).schedule(e,t)},n.now=wn.now,n}(),Sn=new(function(n){function t(t,e){void 0===e&&(e=gn.now);var r=n.call(this,t,e)||this;return r.actions=[],r._active=!1,r}return o(t,n),t.prototype.flush=function(n){var t=this.actions;if(this._active)t.push(n);else{var e;this._active=!0;do{if(e=n.execute(n.state,n.delay))break}while(n=t.shift());if(this._active=!1,e){for(;n=t.shift();)n.unsubscribe();throw e}}},t}(gn))(mn);function xn(n,t){return void 0===t&&(t=Sn),Q((function(e,r){var o=null,i=null,u=null,c=function(){if(o){o.unsubscribe(),o=null;var n=i;i=null,r.next(n)}};function s(){var e=u+n,i=t.now();if(i<e)return o=this.schedule(void 0,e-i),void r.add(o);c()}e.subscribe(W(r,(function(e){i=e,u=t.now(),o||(o=t.schedule(s,n),r.add(o))}),(function(){c(),r.complete()}),void 0,(function(){i=o=null})))}))}var _n={API_URL:"http://localhost:3000"};function In(n){var t=Math.round(Math.random()*n);return fetch(_n.API_URL+"/Car/?id=".concat(t)).then((function(n){if(n.ok)return n.json();throw new Error("Auto nije pronadjen")})).then((function(n){return n[0]})).catch((function(n){return console.log(n)}))}var En=function(n,t,e,r){return new(e||(e=Promise))((function(o,i){function u(n){try{s(r.next(n))}catch(n){i(n)}}function c(n){try{s(r.throw(n))}catch(n){i(n)}}function s(n){var t;n.done?o(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(u,c)}s((r=r.apply(n,t||[])).next())}))},Tn=function(n,t){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(e=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(n,u)}catch(n){c=[6,n],r=0}finally{e=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}};function An(n){for(var t=n.toString().split("").reverse(),e=[],r=0;r<t.length;r++)0!=r&&r%3==0?(e.push("."),e.push(t[r])):e.push(t[r]);return e.reverse().toString().replace(/,/gi,"")+"km/h"}function Ln(n,e,r,o,i){return En(this,void 0,void 0,(function(){var u,c;return Tn(this,(function(s){switch(s.label){case 0:u=function(u){var c,s,a;return Tn(this,(function(l){switch(l.label){case 0:return c=n,s=u,[4,In(i)];case 1:c[s]=l.sent(),l.label=2;case 2:if(n[u].ime==e[t.Leva].innerHTML)return[3,0];l.label=3;case 3:return e[u].innerHTML=n[u].ime,r[u].innerHTML=An(n[u].vremeAuta),(a=new Image).src=n[u].slikaAuta,null!==o[u]&&(a.onload=function(){o[u].src=a.src}),console.log(n[u].slikaAuta),o[u]||console.error("Element za sliku broj ".concat(u," nije pronađen.")),[2]}}))},c=0,s.label=1;case 1:return c<n.length?[5,u(c)]:[3,4];case 2:s.sent(),s.label=3;case 3:return c++,[3,1];case 4:return null!=r[t.Desna]&&(r[t.Desna].style.visibility="hidden"),[2]}}))}))}function kn(n,r,o,i,u,c,s){s.score++,null!=c[e.Trenutni]&&(c[e.Trenutni].innerHTML=s.score.toString());var a=n.filter((function(n){return n.vremeAuta>0})).map((function(n){return n.id})),l=function(n,t,e){for(var r=n;r==n||r==t;)r=Math.round(Math.random()*e);return pn(fetch(_n.API_URL+"/Car/?id=".concat(r)).then((function(n){if(n.ok)return n.json();throw new Error("Auto nije pronadjen")})).then((function(n){return n[0]})).catch((function(n){return console.log(n)})))}(a[t.Leva],a[t.Desna],u);l.subscribe((function(e){r[t.Leva].innerHTML=r[t.Desna].innerHTML,o[t.Leva].innerHTML=o[t.Desna].innerHTML,i[t.Leva].src=i[t.Desna].src,n[t.Leva]=n[t.Desna],n[t.Desna]=e,r[t.Desna].innerHTML=e.ime,o[t.Desna].innerHTML=An(e.vremeAuta),i[t.Desna].src=e.slikaAuta,o[t.Desna].style.visibility="hidden"}))}function Mn(n,t,r,o,i,u,c){c.score>c.highScore&&(c.highScore=c.score,u[e.Max].innerHTML=c.highScore.toString(),localStorage.setItem("HighScore",c.highScore.toString())),c.score=0,null!=u[e.Trenutni]&&(u[e.Trenutni].innerHTML=c.score.toString()),Ln(n,t,r,o,i)}function jn(e,r,o,i,u,c,s,a,l,f,h,d){u[t.Desna].style.visibility="visible",Dn(h),setTimeout((function(){switch(f){case n.Veca:e<=r?(kn(o,i,u,c,a,s,l),Dn(h)):(d.style.display="block",Mn(o,i,u,c,a,s,l),Dn(h));break;case n.Manja:if(!(e>=r)){d.style.display="block",Mn(o,i,u,c,a,s,l),Dn(h);break}kn(o,i,u,c,a,s,l),Dn(h)}}),1500)}function Pn(){return En(this,void 0,void 0,(function(){return Tn(this,(function(n){switch(n.label){case 0:return[4,fetch(_n.API_URL+"/Car/").then((function(n){if(n.ok)return n.json();throw new Error("Auto nije pronadjen")})).then((function(n){return n})).catch((function(n){return console.log(n)}))];case 1:return[2,n.sent().length]}}))}))}function Dn(n){n.forEach((function(n){return n.hidden=!n.hidden}))}var On,Hn,Bn=d((function(n){return function(){n(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Cn=function(n){function t(){var t=n.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return o(t,n),t.prototype.lift=function(n){var t=new Un(this,this);return t.operator=n,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new Bn},t.prototype.next=function(n){var t=this;A((function(){var e,r;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var o=u(t.currentObservers),i=o.next();!i.done;i=o.next())i.value.next(n)}catch(n){e={error:n}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}}}))},t.prototype.error=function(n){var t=this;A((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=n;for(var e=t.observers;e.length;)e.shift().error(n)}}))},t.prototype.complete=function(){var n=this;A((function(){if(n._throwIfClosed(),!n.isStopped){n.isStopped=!0;for(var t=n.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var n;return(null===(n=this.observers)||void 0===n?void 0:n.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),n.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(n){return this._throwIfClosed(),this._checkFinalizedStatuses(n),this._innerSubscribe(n)},t.prototype._innerSubscribe=function(n){var t=this,e=this,r=e.hasError,o=e.isStopped,i=e.observers;return r||o?b:(this.currentObservers=null,i.push(n),new y((function(){t.currentObservers=null,v(i,n)})))},t.prototype._checkFinalizedStatuses=function(n){var t=this,e=t.hasError,r=t.thrownError,o=t.isStopped;e?n.error(r):o&&n.complete()},t.prototype.asObservable=function(){var n=new U;return n.source=this,n},t.create=function(n,t){return new Un(n,t)},t}(U),Un=function(n){function t(t,e){var r=n.call(this)||this;return r.destination=t,r.source=e,r}return o(t,n),t.prototype.next=function(n){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===e||e.call(t,n)},t.prototype.error=function(n){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===e||e.call(t,n)},t.prototype.complete=function(){var n,t;null===(t=null===(n=this.destination)||void 0===n?void 0:n.complete)||void 0===t||t.call(n)},t.prototype._subscribe=function(n){var t,e;return null!==(e=null===(t=this.source)||void 0===t?void 0:t.subscribe(n))&&void 0!==e?e:b},t}(Cn),zn=function(n,t,e,r){return new(e||(e=Promise))((function(o,i){function u(n){try{s(r.next(n))}catch(n){i(n)}}function c(n){try{s(r.throw(n))}catch(n){i(n)}}function s(n){var t;n.done?o(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(u,c)}s((r=r.apply(n,t||[])).next())}))},Rn=function(n,t){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(e=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(n,u)}catch(n){c=[6,n],r=0}finally{e=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}},Nn=new Cn,Vn=[],Fn=[],Yn=[],Gn=[],qn=[],Kn=[],Jn=document.getElementById("KIme"),Qn=document.getElementById("BtnPotvrdi"),Wn=document.getElementById("BtnPotvrdiMsg"),Xn=document.getElementById("myModal"),Zn=document.getElementById("myModalMsg");function $n(){return zn(this,void 0,void 0,(function(){var r;return Rn(this,(function(o){switch(o.label){case 0:return Vn[t.Leva]=document.getElementById("AccNameL"),Vn[t.Desna]=document.getElementById("AccNameR"),Fn[t.Leva]=document.getElementById("AccL"),Fn[t.Desna]=document.getElementById("AccR"),Gn[t.Leva]=document.getElementById("photoCarL"),Gn[t.Desna]=document.getElementById("photoCarR"),qn[n.Veca]=document.getElementById("btn-veca"),qn[n.Manja]=document.getElementById("btn-manja"),Yn[e.Trenutni]=document.getElementById("brPoena"),Yn[e.Max]=document.getElementById("maxPoena"),[4,Pn()];case 1:for(Hn=o.sent(),r=0;r<2;r++)Kn[r]=void 0;return On={score:0,highScore:0},[2]}}))}))}function nt(){var n;Zn.style.display="none",null==localStorage.getItem("username")?(localStorage.clear(),Xn.style.display="block",function(n,t){return un(t,"click").pipe((r=function(){return function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return pn(n,ln(n))}(n.value.toString())},Q((function(n,t){var e=null,o=!1,i=function(){return o&&!e&&t.complete()};n.subscribe(W(t,(function(n){null==e||e.unsubscribe(),K(r()).subscribe(e=W(t,(function(n){return t.next(n)}),(function(){e=null,i()})))}),(function(){o=!0,i()})))}))),(e=function(n){return n.length>3},Q((function(n,t){var r=0;n.subscribe(W(t,(function(n){return e.call(void 0,n,r++)&&t.next(n)})))}))));var e,r}(Jn,Qn).pipe((n=Nn,Q((function(t,e){K(n).subscribe(W(e,(function(){return e.complete()}),_)),!e.closed&&t.subscribe(e)})))).subscribe((function(n){localStorage.setItem("username",n),null!=localStorage.getItem("username")&&(Xn.style.display="none",document.getElementById("UserName").innerHTML=localStorage.getItem("username"),Nn.next(),Nn.complete())}))):document.getElementById("UserName").innerHTML=localStorage.getItem("username"),null!=localStorage.getItem("HighScore")&&(On.highScore=parseInt(localStorage.getItem("HighScore")),Yn[e.Max].innerHTML=On.highScore.toString());var t=function(n){return un(n,"click")}(Wn);t.pipe().subscribe((function(){Zn.style.display="none"}))}window.onload=function(){return zn(this,void 0,void 0,(function(){var e;return Rn(this,(function(r){switch(r.label){case 0:return[4,$n()];case 1:return r.sent(),nt(),Ln(Kn,Vn,Fn,Gn,Hn),e=function(t){var e=un(t[n.Veca],"click"),r=un(t[n.Manja],"click"),o=un(document.getElementById("photoCarR"),"click"),i=un(document.getElementById("photoCarL"),"click");e=vn(e,o),r=vn(r,i);var u=[];return u[n.Veca]=e.pipe(xn(500)),u[n.Manja]=r.pipe(xn(500)),u}(qn),e[n.Veca].subscribe((function(){return zn(this,void 0,void 0,(function(){return Rn(this,(function(e){return jn(Kn[t.Leva].vremeAuta,Kn[t.Desna].vremeAuta,Kn,Vn,Fn,Gn,Yn,Hn,On,n.Veca,qn,Zn),[2]}))}))})),e[n.Manja].subscribe((function(){return zn(this,void 0,void 0,(function(){return Rn(this,(function(e){return jn(Kn[t.Leva].vremeAuta,Kn[t.Desna].vremeAuta,Kn,Vn,Fn,Gn,Yn,Hn,On,n.Manja,qn,Zn),[2]}))}))})),[2]}}))}))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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a0dBQ2QsU0FBTTRELE0sY0FBTixTQUNBQyxLQUNBMUUsR0FBU0MsR0FBTUMsR0FBY0MsR0FBYUMsR0FBV3RCLElBQ2pEMkcsRUhoSEMsU0FBc0JsRCxHQUMzQixJQUFJbUQsRUFBZXJMLEdBQVVrSSxFQUFLMVosRUFBVzZaLE1BQU8sU0FDaERpRCxFQUFldEwsR0FBVWtJLEVBQUsxWixFQUFXK1osT0FBUSxTQUdqRGdELEVBQWdCdkwsR0FDbEIrSixTQUFTQyxlQUFlLGFBQ3hCLFNBRUV3QixFQUFnQnhMLEdBQ2xCK0osU0FBU0MsZUFBZSxhQUN4QixTQUdGcUIsRUFBZXpKLEdBQU15SixFQUFjRSxHQUNuQ0QsRUFBZTFKLEdBQU0wSixFQUFjRSxHQUVuQyxJQUFJQyxFQUErQixHQUduQyxPQUZBQSxFQUFRamQsRUFBVzZaLE1BQVFnRCxFQUFhL1EsS0FBS3dKLEdBQWEsTUFDMUQySCxFQUFRamQsRUFBVytaLE9BQVMrQyxFQUFhaFIsS0FBS3dKLEdBQWEsTUFDcEQySCxDQUNULENHMkZvQkMsQ0FBYXhELElBRy9Ca0QsRUFBWTVjLEVBQVc2WixNQUFNNU8sV0FBVSxXLDRFQUNyQ3FPLEdBQ0VsQyxHQUFLblgsRUFBS3dYLE1BQU1FLFVBQ2hCUCxHQUFLblgsRUFBS2dZLE9BQU9OLFVBQ2pCUCxHQUNBQyxHQUNBQyxHQUNBQyxHQUNBYyxHQUNBcEMsR0FDQXFDLEdBQ0F0WSxFQUFXNlosS0FDWEgsR0FDQUMsSSxhQUlKaUQsRUFBWTVjLEVBQVcrWixPQUFPOU8sV0FBVSxXLDRFQUNwQ3FPLEdBQ0lsQyxHQUFLblgsRUFBS3dYLE1BQU1FLFVBQ2hCUCxHQUFLblgsRUFBS2dZLE9BQU9OLFVBQ2pCUCxHQUNBQyxHQUNBQyxHQUNBQyxHQUNBYyxHQUNBcEMsR0FDQXFDLEdBQ0F0WSxFQUFXK1osTUFDWEwsR0FDQUMsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bva3VzYWotcndhLy4vc3JjL0VudW0vQnV0dG9uRW51bS50cyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL3NyYy9FbnVtL1NpZGVFbnVtLnRzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vc3JjL0VudW0vQnJvalBvZW5hRW51bS50cyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYubWpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlRXJyb3JDbGFzcy5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcnJSZW1vdmUuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9ub29wLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL05vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbm5lckZyb20uanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2V4ZWN1dGVTY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlSW50ZXJuYWxzLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbWFwT25lT3JNYW55QXJncy5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5LmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJncy5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9vYnNlcnZlT24uanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N1YnNjcmliZU9uLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZWQuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVQcm9taXNlLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUFsbC5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9pbnRlcnZhbFByb3ZpZGVyLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWJvdW5jZVRpbWUuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9zcmMvYXBpLnRzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vc3JjL0xvZ2ljL29ic2VydmFibGVzLnRzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vc3JjL0xvZ2ljL3V0aWxpdGllcy50cyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VVbnRpbC5qcyIsIndlYnBhY2s6Ly9wb2t1c2FqLXJ3YS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwid2VicGFjazovL3Bva3VzYWotcndhLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvb2YuanMiLCJ3ZWJwYWNrOi8vcG9rdXNhai1yd2EvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBCdXR0b25UeXBlXHJcbntcclxuICAgIFZlY2E9MCxcclxuICAgIE1hbmphPTFcclxufSIsImV4cG9ydCBlbnVtIFNpZGUge1xyXG4gICAgTGV2YSA9IDAsXHJcbiAgICBEZXNuYSA9IDEsXHJcbiAgfVxyXG4gICIsImV4cG9ydCBlbnVtIEJyb2pQb2VuYVxyXG57XHJcbiAgICBUcmVudXRuaT0wLFxyXG4gICAgTWF4PTFcclxufSIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICB9XG59XG5cbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICBvW2syXSA9IG1ba107XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XG4gIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcbiAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgIH1cbiAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcbiAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIW0pIHJldHVybiBvO1xuICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgdHJ5IHtcbiAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICB9XG4gIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICB9XG4gICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgfVxuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xuICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgIHJba10gPSBhW2pdO1xuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcbiAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xuICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cbiAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcbiAgdmFyIGksIHA7XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gIHJldHVybiBjb29rZWQ7XG59O1xuXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlKGVudiwgdmFsdWUsIGFzeW5jKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XG4gICAgdmFyIGRpc3Bvc2U7XG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XG4gICAgfVxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcbiAgICAgICAgaWYgKCFTeW1ib2wuZGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5kaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qgbm90IGRpc3Bvc2FibGUuXCIpO1xuICAgIGVudi5zdGFjay5wdXNoKHsgdmFsdWU6IHZhbHVlLCBkaXNwb3NlOiBkaXNwb3NlLCBhc3luYzogYXN5bmMgfSk7XG4gIH1cbiAgZWxzZSBpZiAoYXN5bmMpIHtcbiAgICBlbnYuc3RhY2sucHVzaCh7IGFzeW5jOiB0cnVlIH0pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIF9TdXBwcmVzc2VkRXJyb3IgPSB0eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19kaXNwb3NlUmVzb3VyY2VzKGVudikge1xuICBmdW5jdGlvbiBmYWlsKGUpIHtcbiAgICBlbnYuZXJyb3IgPSBlbnYuaGFzRXJyb3IgPyBuZXcgX1N1cHByZXNzZWRFcnJvcihlLCBlbnYuZXJyb3IsIFwiQW4gZXJyb3Igd2FzIHN1cHByZXNzZWQgZHVyaW5nIGRpc3Bvc2FsLlwiKSA6IGU7XG4gICAgZW52Lmhhc0Vycm9yID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChlbnYuc3RhY2subGVuZ3RoKSB7XG4gICAgICB2YXIgcmVjID0gZW52LnN0YWNrLnBvcCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlYy5kaXNwb3NlICYmIHJlYy5kaXNwb3NlLmNhbGwocmVjLnZhbHVlKTtcbiAgICAgICAgaWYgKHJlYy5hc3luYykgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbn07XG4iLCJleHBvcnQgdmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vaXNGdW5jdGlvblwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS50aGVuKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzcyhjcmVhdGVJbXBsKSB7XG4gICAgdmFyIF9zdXBlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBFcnJvci5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICB9O1xuICAgIHZhciBjdG9yRnVuYyA9IGNyZWF0ZUltcGwoX3N1cGVyKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XG4gICAgcmV0dXJuIGN0b3JGdW5jO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRXJyb3JDbGFzcy5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnNcbiAgICAgICAgICAgID8gZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJylcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYXJyUmVtb3ZlKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIDAgPD0gaW5kZXggJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyUmVtb3ZlLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oaW5pdGlhbFRlYXJkb3duKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFRlYXJkb3duID0gaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxGaW5hbGl6ZXIgPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGluaXRpYWxGaW5hbGl6ZXIpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZpbmFsaXplcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZmluYWxpemVyc18xID0gX192YWx1ZXMoX2ZpbmFsaXplcnMpLCBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKTsgIV9maW5hbGl6ZXJzXzFfMS5kb25lOyBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsaXplciA9IF9maW5hbGl6ZXJzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyAhPT0gbnVsbCAmJiBlcnJvcnMgIT09IHZvaWQgMCA/IGVycm9ycyA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGVycm9ycykpLCBfX3JlYWQoZXJyLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZmluYWxpemVyc18xXzEgJiYgIV9maW5hbGl6ZXJzXzFfMS5kb25lICYmIChfYiA9IF9maW5hbGl6ZXJzXzEucmV0dXJuKSkgX2IuY2FsbChfZmluYWxpemVyc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24uY2xvc2VkIHx8IHRlYXJkb3duLl9oYXNQYXJlbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodGhpcy5fZmluYWxpemVycyA9IChfYSA9IHRoaXMuX2ZpbmFsaXplcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICBfZmluYWxpemVycyAmJiBhcnJSZW1vdmUoX2ZpbmFsaXplcnMsIHRlYXJkb3duKTtcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0ZWFyZG93bi5fcmVtb3ZlUGFyZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH07XG5leHBvcnQgdmFyIEVNUFRZX1NVQlNDUklQVElPTiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUucmVtb3ZlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmFkZCkgJiYgaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcbn1cbmZ1bmN0aW9uIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZmluYWxpemVyKSkge1xuICAgICAgICBmaW5hbGl6ZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbmFsaXplci51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldFRpbWVvdXQuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcbiAgICB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcG9ydFVuaGFuZGxlZEVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG52YXIgY29udGV4dCA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JDb250ZXh0KGNiKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIHZhciBpc1Jvb3QgPSAhY29udGV4dDtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHsgZXJyb3JUaHJvd246IGZhbHNlLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNiKCk7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbnRleHQsIGVycm9yVGhyb3duID0gX2EuZXJyb3JUaHJvd24sIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JDb250ZXh0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgbmV4dE5vdGlmaWNhdGlvbiwgZXJyb3JOb3RpZmljYXRpb24sIENPTVBMRVRFX05PVElGSUNBVElPTiB9IGZyb20gJy4vTm90aWZpY2F0aW9uRmFjdG9yaWVzJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5pbXBvcnQgeyBjYXB0dXJlRXJyb3IgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIF9iaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIF9iaW5kLmNhbGwoZm4sIHRoaXNBcmcpO1xufVxudmFyIENvbnN1bWVyT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE9ic2VydmVyID0gcGFydGlhbE9ic2VydmVyO1xuICAgIH1cbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5lcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25zdW1lck9ic2VydmVyO1xufSgpKTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IChvYnNlcnZlck9yTmV4dCAhPT0gbnVsbCAmJiBvYnNlcnZlck9yTmV4dCAhPT0gdm9pZCAwID8gb2JzZXJ2ZXJPck5leHQgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwID8gZXJyb3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlICE9PSBudWxsICYmIGNvbXBsZXRlICE9PSB2b2lkIDAgPyBjb21wbGV0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogb2JzZXJ2ZXJPck5leHQubmV4dCAmJiBiaW5kKG9ic2VydmVyT3JOZXh0Lm5leHQsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlck9yTmV4dC5lcnJvciAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXJPck5leHQuY29tcGxldGUgJiYgYmluZChvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbmZ1bmN0aW9uIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIGNhcHR1cmVFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnQgdmFyIEVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlKSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsImltcG9ydCB7IFNhZmVTdWJzY3JpYmVyLCBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgcGlwZUZyb21BcnJheSB9IGZyb20gJy4vdXRpbC9waXBlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gaXNTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0KSA/IG9ic2VydmVyT3JOZXh0IDogbmV3IFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90cnlTdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiAodmFsdWUgPSB4KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gcGlwZSgpIHtcbiAgICB2YXIgZm5zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgZm5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGlwZUZyb21BcnJheShmbnMpIHtcbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJbnRlcm9wT2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsImltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZXJhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jR2VuZXJhdG9yLCBfX2F3YWl0LCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcl8xKCkge1xuICAgICAgICB2YXIgcmVhZGVyLCBfYSwgdmFsdWUsIGRvbmU7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzEsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cnVlKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQocmVhZGVyLnJlYWQoKSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHJldHVybiBbMywgNV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdCh2b2lkIDApXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCwgX19hd2FpdCh2YWx1ZSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFs0LCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWRhYmxlU3RyZWFtTGlrZShvYmopIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmouZ2V0UmVhZGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlLCByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnMuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCByZXBvcnRVbmhhbmRsZWRFcnJvcik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXN5bmNJdGVyYWJsZShhc3luY0l0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikge1xuICAgIHZhciBhc3luY0l0ZXJhYmxlXzEsIGFzeW5jSXRlcmFibGVfMV8xO1xuICAgIHZhciBlXzIsIF9hO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlLCBlXzJfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFswLCA1LCA2LCAxMV0pO1xuICAgICAgICAgICAgICAgICAgICBhc3luY0l0ZXJhYmxlXzEgPSBfX2FzeW5jVmFsdWVzKGFzeW5jSXRlcmFibGUpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQsIGFzeW5jSXRlcmFibGVfMS5uZXh0KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgPSBfYi5zZW50KCksICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhc3luY0l0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGVfMl8xID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBlXzIgPSB7IGVycm9yOiBlXzJfMSB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbNiwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSAmJiAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBhc3luY0l0ZXJhYmxlXzEucmV0dXJuKSkpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX2EuY2FsbChhc3luY0l0ZXJhYmxlXzEpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA4O1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5uZXJGcm9tLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0xpZnQoc291cmNlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmxpZnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSkge1xuICAgIHJldHVybiBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpO1xufVxudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSwgc2hvdWxkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xuICAgICAgICBfdGhpcy5zaG91bGRVbnN1YnNjcmliZSA9IHNob3VsZFVuc3Vic2NyaWJlO1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9wZXJhdG9yU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xuICAgICAgICAgICAgdmFyIGNsb3NlZF8xID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAhY2xvc2VkXzEgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZXJhdG9yU3Vic2NyaWJlci5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZXhlY3V0ZVNjaGVkdWxlKHBhcmVudFN1YnNjcmlwdGlvbiwgc2NoZWR1bGVyLCB3b3JrLCBkZWxheSwgcmVwZWF0KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgaWYgKHJlcGVhdCA9PT0gdm9pZCAwKSB7IHJlcGVhdCA9IGZhbHNlOyB9XG4gICAgdmFyIHNjaGVkdWxlU3Vic2NyaXB0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd29yaygpO1xuICAgICAgICBpZiAocmVwZWF0KSB7XG4gICAgICAgICAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHRoaXMuc2NoZWR1bGUobnVsbCwgZGVsYXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH0sIGRlbGF5KTtcbiAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHNjaGVkdWxlU3Vic2NyaXB0aW9uKTtcbiAgICBpZiAoIXJlcGVhdCkge1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVTdWJzY3JpcHRpb247XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZVNjaGVkdWxlLmpzLm1hcCIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50LCBvbkJlZm9yZU5leHQsIGV4cGFuZCwgaW5uZXJTdWJTY2hlZHVsZXIsIGFkZGl0aW9uYWxGaW5hbGl6ZXIpIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgICAgICBvbkJlZm9yZU5leHQgPT09IG51bGwgfHwgb25CZWZvcmVOZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJlZm9yZU5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgb3V0ZXJOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lckNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaW5uZXJDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZFZhbHVlID0gYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWJTY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgaW5uZXJTdWJTY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsRmluYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZGRpdGlvbmFsRmluYWxpemVyKCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcIi4uL29wZXJhdG9ycy9tYXBcIjtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNhbGxPckFwcGx5KGZuLCBhcmdzKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkoYXJncykgPyBmbi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpIDogZm4oYXJncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwT25lT3JNYW55QXJncyhmbikge1xuICAgIHJldHVybiBtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGNhbGxPckFwcGx5KGZuLCBhcmdzKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBPbmVPck1hbnlBcmdzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWVyZ2VNYXAnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgbWFwT25lT3JNYW55QXJncyB9IGZyb20gJy4uL3V0aWwvbWFwT25lT3JNYW55QXJncyc7XG52YXIgbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMgPSBbJ2FkZExpc3RlbmVyJywgJ3JlbW92ZUxpc3RlbmVyJ107XG52YXIgZXZlbnRUYXJnZXRNZXRob2RzID0gWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXTtcbnZhciBqcXVlcnlNZXRob2RzID0gWydvbicsICdvZmYnXTtcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXBPbmVPck1hbnlBcmdzKHJlc3VsdFNlbGVjdG9yKSk7XG4gICAgfVxuICAgIHZhciBfYSA9IF9fcmVhZChpc0V2ZW50VGFyZ2V0KHRhcmdldClcbiAgICAgICAgPyBldmVudFRhcmdldE1ldGhvZHMubWFwKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07IH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICA/IG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgOiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgPyBqcXVlcnlNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIDogW10sIDIpLCBhZGQgPSBfYVswXSwgcmVtb3ZlID0gX2FbMV07XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoc3ViVGFyZ2V0KSB7IHJldHVybiBmcm9tRXZlbnQoc3ViVGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpOyB9KShpbm5lckZyb20odGFyZ2V0KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBldmVudCB0YXJnZXQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIubmV4dCgxIDwgYXJncy5sZW5ndGggPyBhcmdzIDogYXJnc1swXSk7XG4gICAgICAgIH07XG4gICAgICAgIGFkZChoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShoYW5kbGVyKTsgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07IH07XG59XG5mdW5jdGlvbiBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkTGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUxpc3RlbmVyKTtcbn1cbmZ1bmN0aW9uIGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0Lm9uKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5vZmYpO1xufVxuZnVuY3Rpb24gaXNFdmVudFRhcmdldCh0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IHZhciBFTVBUWSA9IG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pO1xuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5KHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBlbXB0eVNjaGVkdWxlZChzY2hlZHVsZXIpIDogRU1QVFk7XG59XG5mdW5jdGlvbiBlbXB0eVNjaGVkdWxlZChzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtcHR5LmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuL2lzU2NoZWR1bGVyJztcbmZ1bmN0aW9uIGxhc3QoYXJyKSB7XG4gICAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wUmVzdWx0U2VsZWN0b3IoYXJncykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BTY2hlZHVsZXIoYXJncykge1xuICAgIHJldHVybiBpc1NjaGVkdWxlcihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wTnVtYmVyKGFyZ3MsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgbGFzdChhcmdzKSA9PT0gJ251bWJlcicgPyBhcmdzLnBvcCgpIDogZGVmYXVsdFZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJncy5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc1NjaGVkdWxlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnNjaGVkdWxlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9LCBkZWxheSk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSwgZGVsYXkpOyB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7IH0sIGRlbGF5KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVPbi5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmFibGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi9pbm5lckZyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikgOiBpbm5lckZyb20oaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZU9ic2VydmFibGUgfSBmcm9tICcuL3NjaGVkdWxlT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVByb21pc2UgfSBmcm9tICcuL3NjaGVkdWxlUHJvbWlzZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFycmF5IH0gZnJvbSAnLi9zY2hlZHVsZUFycmF5JztcbmltcG9ydCB7IHNjaGVkdWxlSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlSXRlcmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUFzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi91dGlsL2lzUHJvbWlzZSc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UgfSBmcm9tICcuL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZWQuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL29ic2VydmVPbic7XG5pbXBvcnQgeyBzdWJzY3JpYmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9zdWJzY3JpYmVPbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gaW5uZXJGcm9tKGlucHV0KS5waXBlKHN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlT2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlucHV0W2krK10pO1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFycmF5LmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9ic2VydmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9vYnNlcnZlT24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVByb21pc2UuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaXRlcmF0b3I7XG4gICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yID0gaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGRvbmU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gaXRlcmF0b3IubmV4dCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNGdW5jdGlvbihpdGVyYXRvciA9PT0gbnVsbCB8fCBpdGVyYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaXRlcmF0b3IucmV0dXJuKSAmJiBpdGVyYXRvci5yZXR1cm4oKTsgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUFzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IoaW5wdXQpLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VBbGwgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWVyZ2VBbGwnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi9pbm5lckZyb20nO1xuaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuL2VtcHR5JztcbmltcG9ydCB7IHBvcE51bWJlciwgcG9wU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKGFyZ3MpO1xuICAgIHZhciBjb25jdXJyZW50ID0gcG9wTnVtYmVyKGFyZ3MsIEluZmluaXR5KTtcbiAgICB2YXIgc291cmNlcyA9IGFyZ3M7XG4gICAgcmV0dXJuICFzb3VyY2VzLmxlbmd0aFxuICAgICAgICA/XG4gICAgICAgICAgICBFTVBUWVxuICAgICAgICA6IHNvdXJjZXMubGVuZ3RoID09PSAxXG4gICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgaW5uZXJGcm9tKHNvdXJjZXNbMF0pXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgbWVyZ2VBbGwoY29uY3VycmVudCkoZnJvbShzb3VyY2VzLCBzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiBtZXJnZU1hcChpZGVudGl0eSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG52YXIgQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBBY3Rpb247XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIGludGVydmFsUHJvdmlkZXIgPSB7XG4gICAgc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0SW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRJbnRlcnZhbC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRJbnRlcnZhbC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFySW50ZXJ2YWwpIHx8IGNsZWFySW50ZXJ2YWwpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVydmFsUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgeyBpbnRlcnZhbFByb3ZpZGVyIH0gZnJvbSAnLi9pbnRlcnZhbFByb3ZpZGVyJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4uL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBBc3luY0FjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLmlkID0gKF9hID0gdGhpcy5pZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5yZXF1ZXN0QXN5bmNJZChzY2hlZHVsZXIsIHRoaXMuaWQsIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBfaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gaW50ZXJ2YWxQcm92aWRlci5zZXRJbnRlcnZhbChzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHRoaXMpLCBkZWxheSk7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoX3NjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCAmJiB0aGlzLmRlbGF5ID09PSBkZWxheSAmJiB0aGlzLnBlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIGludGVydmFsUHJvdmlkZXIuY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2V4ZWN1dGluZyBhIGNhbmNlbGxlZCBhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBlbmRpbmcgPT09IGZhbHNlICYmIHRoaXMuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQodGhpcy5zY2hlZHVsZXIsIHRoaXMuaWQsIG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIF9kZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9IGUgPyBlIDogbmV3IEVycm9yKCdTY2hlZHVsZWQgYWN0aW9uIHRocmV3IGZhbHN5IGVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgICAgICB0aGlzLndvcmsgPSB0aGlzLnN0YXRlID0gdGhpcy5zY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhcnJSZW1vdmUoYWN0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uKSk7XG5leHBvcnQgeyBBc3luY0FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwIiwiZXhwb3J0IHZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXIgPSB7XG4gICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmRlbGVnYXRlIHx8IERhdGUpLm5vdygpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyJztcbnZhciBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjaGVkdWxlcihzY2hlZHVsZXJBY3Rpb25DdG9yLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yID0gc2NoZWR1bGVyQWN0aW9uQ3RvcjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3Rvcih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGRhdGVUaW1lc3RhbXBQcm92aWRlci5ub3c7XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbmV4cG9ydCB2YXIgYXN5bmNTY2hlZHVsZXIgPSBuZXcgQXN5bmNTY2hlZHVsZXIoQXN5bmNBY3Rpb24pO1xuZXhwb3J0IHZhciBhc3luYyA9IGFzeW5jU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTY2hlZHVsZXIgfSBmcm9tICcuLi9TY2hlZHVsZXInO1xudmFyIEFzeW5jU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBub3cpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcikpO1xuZXhwb3J0IHsgQXN5bmNTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIHZhciBsYXN0VGltZSA9IG51bGw7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gZW1pdFdoZW5JZGxlKCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldFRpbWUgPSBsYXN0VGltZSArIGR1ZVRpbWU7XG4gICAgICAgICAgICB2YXIgbm93ID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICAgICAgaWYgKG5vdyA8IHRhcmdldFRpbWUpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIHRhcmdldFRpbWUgLSBub3cpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGFjdGl2ZVRhc2spO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgbGFzdFRpbWUgPSBzY2hlZHVsZXIubm93KCk7XG4gICAgICAgICAgICBpZiAoIWFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gc2NoZWR1bGVyLnNjaGVkdWxlKGVtaXRXaGVuSWRsZSwgZHVlVGltZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoYWN0aXZlVGFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2VUaW1lLmpzLm1hcCIsImV4cG9ydCBjb25zdCBhcGk9e1xyXG4gICAgQVBJX1VSTDpcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMFwiXHJcbn0iLCJpbXBvcnQge1xyXG4gICAgZGVib3VuY2VUaW1lLFxyXG4gICAgZmlsdGVyLFxyXG4gICAgZnJvbSxcclxuICAgIGZyb21FdmVudCxcclxuICAgIG1lcmdlLFxyXG4gICAgT2JzZXJ2YWJsZSxcclxuICAgIG9mLFxyXG4gICAgc3dpdGNoTWFwLFxyXG4gIH0gZnJvbSBcInJ4anNcIjtcclxuICBpbXBvcnQgeyBhcGkgfSBmcm9tIFwiLi4vYXBpXCI7XHJcbiAgaW1wb3J0IHsgQnV0dG9uVHlwZSB9IGZyb20gXCIuLi9FbnVtL0J1dHRvbkVudW1cIjtcclxuICBcclxuICBleHBvcnQgZnVuY3Rpb24gR2V0Q2FyKEJyb2pBdXRhOiBudW1iZXIpXHJcbiAge1xyXG4gICAgY29uc3QgSUQ9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSpCcm9qQXV0YSk7XHJcbiAgICByZXR1cm4gZmV0Y2goYXBpLkFQSV9VUkwrYC9DYXIvP2lkPSR7SUR9YClcclxuICAgIC50aGVuKChBdXRvUGFja2FnZSk9PlxyXG4gICAge1xyXG4gICAgICAgIGlmKEF1dG9QYWNrYWdlLm9rKSBcclxuICAgICAgICAgICAgcmV0dXJuIEF1dG9QYWNrYWdlLmpzb24oKTtcclxuICAgICAgICBlbHNlIFxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvIG5pamUgcHJvbmFkamVuXCIpO1xyXG4gICAgfSlcclxuICAgIC50aGVuKGZ1bmN0aW9uIChBdXRvUGFja2FnZSlcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gQXV0b1BhY2thZ2VbMF07XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpPT5jb25zb2xlLmxvZyhlcnIpKTtcclxuXHJcbiAgfVxyXG4gIGV4cG9ydCBmdW5jdGlvbiBTZXR1cEJ1dHRvbnMoQnRuczogSFRNTEJ1dHRvbkVsZW1lbnRbXSkge1xyXG4gICAgbGV0ICREdWdtZUV2ZW50MSA9IGZyb21FdmVudChCdG5zW0J1dHRvblR5cGUuVmVjYV0sIFwiY2xpY2tcIik7XHJcbiAgICBsZXQgJER1Z21lRXZlbnQyID0gZnJvbUV2ZW50KEJ0bnNbQnV0dG9uVHlwZS5NYW5qYV0sIFwiY2xpY2tcIik7XHJcbiAgXHJcbiAgICAvL3ByZXByYXZpdGkgb2QgemF2aXNub3N0aSBzdGEgZ2V0RWxlbWVudEJ5SUQgaHZhdGFcclxuICAgIGxldCAkTW9iaWxlRXZlbnQxID0gZnJvbUV2ZW50KFxyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBob3RvQ2FyUlwiKSBhcyBIVE1MRGl2RWxlbWVudCxcclxuICAgICAgXCJjbGlja1wiXHJcbiAgICApO1xyXG4gICAgbGV0ICRNb2JpbGVFdmVudDIgPSBmcm9tRXZlbnQoXHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGhvdG9DYXJMXCIpIGFzIEhUTUxEaXZFbGVtZW50LFxyXG4gICAgICBcImNsaWNrXCJcclxuICAgICk7XHJcbiAgXHJcbiAgICAkRHVnbWVFdmVudDEgPSBtZXJnZSgkRHVnbWVFdmVudDEsICRNb2JpbGVFdmVudDEpO1xyXG4gICAgJER1Z21lRXZlbnQyID0gbWVyZ2UoJER1Z21lRXZlbnQyLCAkTW9iaWxlRXZlbnQyKTtcclxuICBcclxuICAgIGxldCBPYnNBcnIkOiBPYnNlcnZhYmxlPEV2ZW50PltdID0gW107XHJcbiAgICBPYnNBcnIkW0J1dHRvblR5cGUuVmVjYV0gPSAkRHVnbWVFdmVudDEucGlwZShkZWJvdW5jZVRpbWUoNTAwKSk7XHJcbiAgICBPYnNBcnIkW0J1dHRvblR5cGUuTWFuamFdID0gJER1Z21lRXZlbnQyLnBpcGUoZGVib3VuY2VUaW1lKDUwMCkpO1xyXG4gICAgcmV0dXJuIE9ic0FyciQ7XHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBmdW5jdGlvbiBHZXROZXdPbmUoSURQcnZvZ0F1dGE6bnVtYmVyLCBJRERydWdvZ0F1dGE6bnVtYmVyLEJyb2pBdXRhOm51bWJlcilcclxuICB7XHJcbiAgICBsZXQgU2VhcmNoSUQ9SURQcnZvZ0F1dGE7XHJcbiAgICB3aGlsZShTZWFyY2hJRD09SURQcnZvZ0F1dGEgfHwgU2VhcmNoSUQ9PUlERHJ1Z29nQXV0YSlcclxuICAgIHtcclxuICAgICAgICBTZWFyY2hJRD1NYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkqQnJvakF1dGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmcm9tKFxyXG4gICAgICAgIGZldGNoKGFwaS5BUElfVVJMK2AvQ2FyLz9pZD0ke1NlYXJjaElEfWApXHJcbiAgICAgICAgLnRoZW4oKEF1dG9QYWNrYWdlKT0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihBdXRvUGFja2FnZS5vaylcclxuICAgICAgICAgICAgICAgIHJldHVybiBBdXRvUGFja2FnZS5qc29uKCk7XHJcbiAgICAgICAgICAgIGVsc2UgICAgXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvIG5pamUgcHJvbmFkamVuXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oQXV0b1BhY2thZ2Upe1xyXG4gICAgICAgICAgICByZXR1cm4gQXV0b1BhY2thZ2VbMF07XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycik9PmNvbnNvbGUubG9nKGVycikpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIEdldFVzZXJOYW1lKElucHV0OiBIVE1MSW5wdXRFbGVtZW50LFN1Ym1pdEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQpXHJcbiAge1xyXG4gICAgcmV0dXJuIGZyb21FdmVudChTdWJtaXRCdXR0b24sXCJjbGlja1wiKS5waXBlKFxyXG4gICAgICAgIHN3aXRjaE1hcCgoKT0+b2YoSW5wdXQudmFsdWUudG9TdHJpbmcoKSkpLFxyXG4gICAgICAgIGZpbHRlcigoS29yaXNuaWNrb0ltZTpzdHJpbmcpPT5Lb3Jpc25pY2tvSW1lLmxlbmd0aD4zKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGV4cG9ydCBmdW5jdGlvbiBDbG9zZU1lc3NhZ2UoU3VibWl0QnV0dG9uOkhUTUxCdXR0b25FbGVtZW50KVxyXG4gIHtcclxuICAgIHJldHVybiBmcm9tRXZlbnQoU3VibWl0QnV0dG9uLFwiY2xpY2tcIik7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gZ2V0QWxsQ2FycygpXHJcbiAge1xyXG4gICAgcmV0dXJuIGZldGNoKGFwaS5BUElfVVJMK2AvQ2FyL2ApXHJcbiAgICAgICAgLnRoZW4oKEF1dG9QYWNrYWdlKT0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihBdXRvUGFja2FnZS5vaylcclxuICAgICAgICAgICAgICAgIHJldHVybiBBdXRvUGFja2FnZS5qc29uKCk7XHJcbiAgICAgICAgICAgIGVsc2UgXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvIG5pamUgcHJvbmFkamVuXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oQXV0b1BhY2thZ2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gQXV0b1BhY2thZ2U7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycik9PmNvbnNvbGUubG9nKGVycikpO1xyXG4gIH1cclxuIiwiaW1wb3J0IHsgQnV0dG9uVHlwZSB9IGZyb20gXCIuLi9FbnVtL0J1dHRvbkVudW1cIjtcclxuaW1wb3J0IHsgU2lkZSB9IGZyb20gXCIuLi9FbnVtL1NpZGVFbnVtXCI7XHJcbmltcG9ydCB7IEF1dG8gfSBmcm9tIFwiLi4vTW9kZWxzL0F1dG9cIjtcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9Nb2RlbHMvVXNlclwiO1xyXG5pbXBvcnQgeyBCcm9qUG9lbmEgfSBmcm9tIFwiLi4vRW51bS9Ccm9qUG9lbmFFbnVtXCI7XHJcbmltcG9ydCB7IGdldEFsbENhcnMsIEdldENhciwgR2V0TmV3T25lIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZXNcIjtcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRm9ybWF0QWNjZWxlcmF0aW9uKEFjY2VsZXJhdGlvbjpudW1iZXIpXHJcbntcclxuICAgIGxldCBVbkZvcm1hdHRlZFJldmVyc2VkPUFjY2VsZXJhdGlvbi50b1N0cmluZygpLnNwbGl0KFwiXCIpLnJldmVyc2UoKTtcclxuICAgIGxldCBUb0JlRm9ybWF0dGVkOiBzdHJpbmdbXT1bXTtcclxuICAgIGZvcihsZXQgaT0wO2k8VW5Gb3JtYXR0ZWRSZXZlcnNlZC5sZW5ndGg7aSsrKVxyXG4gICAge1xyXG4gICAgICAgIGlmKGkhPTAgJiYgaSUzPT0wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBUb0JlRm9ybWF0dGVkLnB1c2goXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgVG9CZUZvcm1hdHRlZC5wdXNoKFVuRm9ybWF0dGVkUmV2ZXJzZWRbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBUb0JlRm9ybWF0dGVkLnB1c2goVW5Gb3JtYXR0ZWRSZXZlcnNlZFtpXSk7XHJcbiAgICB9XHJcbiAgICAvL3BvZ2xlZGF0aSBzdGEgamUgZ2lcclxuICAgIHJldHVybiBUb0JlRm9ybWF0dGVkLnJldmVyc2UoKS50b1N0cmluZygpLnJlcGxhY2UoLywvZ2ksXCJcIikrXCJrbS9oXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBEcmF3Q2FycyhDYXJzOkF1dG9bXSxDYXJOYW1lTGFiZWw6IEhUTUxMYWJlbEVsZW1lbnRbXSwgQ2FyQWNjTGFiZWw6IEhUTUxMYWJlbEVsZW1lbnRbXSwgU2xpa2VBdXRhOiBIVE1MSW1hZ2VFbGVtZW50W10sQnJvakF1dGE6IG51bWJlcikge1xyXG4gICAgZm9yKGxldCBpPTA7aTxDYXJzLmxlbmd0aDtpKyspXHJcbiAgICB7XHJcbiAgICAgXHJcbiAgICAgICAgZG97XHJcbiAgICAgICAgICAgIENhcnNbaV09IGF3YWl0IEdldENhcihCcm9qQXV0YSk7XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICAgICAgd2hpbGUoQ2Fyc1tpXS5pbWU9PUNhck5hbWVMYWJlbFtTaWRlLkxldmFdLmlubmVySFRNTCk7ICAgICAgXHJcblxyXG4gICAgICAgIENhck5hbWVMYWJlbFtpXS5pbm5lckhUTUw9Q2Fyc1tpXS5pbWU7XHJcbiAgICAgICAgQ2FyQWNjTGFiZWxbaV0uaW5uZXJIVE1MPUZvcm1hdEFjY2VsZXJhdGlvbihDYXJzW2ldLnZyZW1lQXV0YSk7XHJcbiAgICAgICAgLy9TbGlrZUF1dGFbaV0uc3JjPUNhcnNbaV0uc2xpa2FBdXRhO1xyXG5cclxuICAgICAgICAvLyBLcmVpcmFuamUgbm92ZSBpbnN0YW5jZSBIVE1MSW1hZ2VFbGVtZW50XHJcbiAgICAgICAgY29uc3QgbmV3SW1hZ2VFbGVtZW50ID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgICAgIC8vIFBvc3RhdmxqYW5qZSBwdXRhbmplIHNsaWtlIG5hIG5vdmkgZWxlbWVudFxyXG4gICAgICAgIG5ld0ltYWdlRWxlbWVudC5zcmMgPSBDYXJzW2ldLnNsaWthQXV0YTtcclxuXHJcbiAgICAgICAgLy8gUG9zdGF2bGphbmplIHB1dGFuamUgc2xpa2UgbmEgc3RhcmkgZWxlbWVudCB0ZWsgbmFrb24gxaF0byBzZSBub3ZhIHNsaWthIHXEjWl0YVxyXG4gICAgICAgIGlmIChTbGlrZUF1dGFbaV0gIT09IG51bGwpIHtcclxuICAgICAgICAgIC8vIFBvc3RhdmxqYW5qZSBwdXRhbmplIHNsaWtlIG5hIHN0YXJpIGVsZW1lbnQgdGVrIG5ha29uIMWhdG8gc2Ugbm92YSBzbGlrYSB1xI1pdGFcclxuICAgICAgICAgIG5ld0ltYWdlRWxlbWVudC5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgU2xpa2VBdXRhW2ldLnNyYyA9IG5ld0ltYWdlRWxlbWVudC5zcmM7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coQ2Fyc1tpXS5zbGlrYUF1dGEpO1xyXG4gICAgICAgICAgICBjb25zdCBpbWdFbGVtZW50ID0gU2xpa2VBdXRhW2ldO1xyXG4gICAgICAgICAgICBpZiAoIWltZ0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVsZW1lbnQgemEgc2xpa3UgYnJvaiAke2l9IG5pamUgcHJvbmHEkWVuLmApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgaWYoQ2FyQWNjTGFiZWxbU2lkZS5EZXNuYV0hPW51bGwpe1xyXG4gICAgQ2FyQWNjTGFiZWxbU2lkZS5EZXNuYV0uc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiOyAgICBcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENvbnRpbnVlR2FtZShDYXJzOkF1dG9bXSxDYXJOYW1lTGFiZWw6IEhUTUxMYWJlbEVsZW1lbnRbXSwgQ2FyQWNjTGFiZWw6IEhUTUxMYWJlbEVsZW1lbnRbXSwgU2xpa2VBdXRhOiBIVE1MSW1hZ2VFbGVtZW50W10sQnJvakF1dGE6IG51bWJlcixCcm9qUG9lbmFMYWJlbDogSFRNTExhYmVsRWxlbWVudFtdLElncmFjOlVzZXIpXHJcbntcclxuXHJcbiAgICBJZ3JhYy5zY29yZSsrO1xyXG4gICAgaWYoQnJvalBvZW5hTGFiZWxbQnJvalBvZW5hLlRyZW51dG5pXSE9bnVsbCl7XHJcbiAgICBCcm9qUG9lbmFMYWJlbFtCcm9qUG9lbmEuVHJlbnV0bmldLmlubmVySFRNTD1JZ3JhYy5zY29yZS50b1N0cmluZygpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgQWNjZWxlcmF0aW9uQXJyYXk9IENhcnMuZmlsdGVyKChpdGVtKT0+aXRlbS52cmVtZUF1dGE+MCkubWFwKFxyXG4gICAgICAgIChpdGVtKT0+aXRlbS5pZFxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgZmV0Y2hPYnM9R2V0TmV3T25lKFxyXG4gICAgICAgIEFjY2VsZXJhdGlvbkFycmF5W1NpZGUuTGV2YV0sXHJcbiAgICAgICAgQWNjZWxlcmF0aW9uQXJyYXlbU2lkZS5EZXNuYV0sXHJcbiAgICAgICAgQnJvakF1dGFcclxuICAgIClcclxuXHJcbiAgICBmZXRjaE9icy5zdWJzY3JpYmUoKE5ld0NhcjpBdXRvKT0+XHJcbiAgICB7XHJcbiAgICAgICAgQ2FyTmFtZUxhYmVsW1NpZGUuTGV2YV0uaW5uZXJIVE1MPSBDYXJOYW1lTGFiZWxbU2lkZS5EZXNuYV0uaW5uZXJIVE1MO1xyXG4gICAgICAgIENhckFjY0xhYmVsW1NpZGUuTGV2YV0uaW5uZXJIVE1MPUNhckFjY0xhYmVsW1NpZGUuRGVzbmFdLmlubmVySFRNTDsgICAgICAgIFxyXG4gICAgICAgIFNsaWtlQXV0YVtTaWRlLkxldmFdLnNyYz1TbGlrZUF1dGFbU2lkZS5EZXNuYV0uc3JjO1xyXG4gICAgICAgIENhcnNbU2lkZS5MZXZhXSA9IENhcnNbU2lkZS5EZXNuYV07XHJcbiAgICAgICAgQ2Fyc1tTaWRlLkRlc25hXSA9IE5ld0NhcjtcclxuXHJcblxyXG4gICAgICAgIENhck5hbWVMYWJlbFtTaWRlLkRlc25hXS5pbm5lckhUTUwgPSBOZXdDYXIuaW1lO1xyXG4gICAgICAgIENhckFjY0xhYmVsW1NpZGUuRGVzbmFdLmlubmVySFRNTCA9IEZvcm1hdEFjY2VsZXJhdGlvbihOZXdDYXIudnJlbWVBdXRhKTtcclxuICAgICAgICBTbGlrZUF1dGFbU2lkZS5EZXNuYV0uc3JjID0gTmV3Q2FyLnNsaWthQXV0YTtcclxuICAgICAgICBDYXJBY2NMYWJlbFtTaWRlLkRlc25hXS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTdG9wQW5kUmVzdGFydChDYXJzOkF1dG9bXSxDYXJOYW1lTGFiZWw6IEhUTUxMYWJlbEVsZW1lbnRbXSwgQ2FyQWNjTGFiZWw6IEhUTUxMYWJlbEVsZW1lbnRbXSwgU2xpa2VBdXRhOiBIVE1MSW1hZ2VFbGVtZW50W10sQnJvakF1dGE6IG51bWJlcixCcm9qUG9lbmFMYWJlbDogSFRNTExhYmVsRWxlbWVudFtdLElncmFjOlVzZXIpIHtcclxuICAgIGlmIChJZ3JhYy5zY29yZSA+IElncmFjLmhpZ2hTY29yZSkge1xyXG4gICAgICBJZ3JhYy5oaWdoU2NvcmUgPSBJZ3JhYy5zY29yZTtcclxuICAgICAgQnJvalBvZW5hTGFiZWxbQnJvalBvZW5hLk1heF0uaW5uZXJIVE1MID0gSWdyYWMuaGlnaFNjb3JlLnRvU3RyaW5nKCk7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiSGlnaFNjb3JlXCIsIElncmFjLmhpZ2hTY29yZS50b1N0cmluZygpKTtcclxuICAgIH1cclxuICAgIElncmFjLnNjb3JlID0gMDtcclxuICAgIGlmKEJyb2pQb2VuYUxhYmVsW0Jyb2pQb2VuYS5UcmVudXRuaV0hPW51bGwpe1xyXG4gICAgQnJvalBvZW5hTGFiZWxbQnJvalBvZW5hLlRyZW51dG5pXS5pbm5lckhUTUwgPSBJZ3JhYy5zY29yZS50b1N0cmluZygpO1xyXG4gICAgfVxyXG4gICAgRHJhd0NhcnMoQ2FycywgQ2FyTmFtZUxhYmVsLCBDYXJBY2NMYWJlbCwgU2xpa2VBdXRhLCBCcm9qQXV0YSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIFNvbHZlUHJvYmxlbShMZWZ0OiBudW1iZXIsUmlnaHQ6IG51bWJlcixDYXJzOkF1dG9bXSwgQ2FyTmFtZUxhYmVsOiBIVE1MTGFiZWxFbGVtZW50W10sIENhckFjY0xhYmVsOiBIVE1MTGFiZWxFbGVtZW50W10sIFNsaWtlQXV0YTogSFRNTEltYWdlRWxlbWVudFtdLEJyb2pQb2VuYTogSFRNTExhYmVsRWxlbWVudFtdLCBCcm9qQXV0YTogbnVtYmVyLCBJZ3JhYzogVXNlciwgQnV0dG9uQWN0aXZhdGVkOiBCdXR0b25UeXBlLCBCdG5zOiBIVE1MQnV0dG9uRWxlbWVudFtdLCBNc2dNb2RhbDogSFRNTEVsZW1lbnQpIFxyXG4gIHtcclxuICAgIENhckFjY0xhYmVsW1NpZGUuRGVzbmFdLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuICAgIEVuYWJsZU9yRGlzYWJsZUJ1dHRvbnMoQnRucyk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgc3dpdGNoIChCdXR0b25BY3RpdmF0ZWQpIHtcclxuICAgICAgICBjYXNlIEJ1dHRvblR5cGUuVmVjYTpcclxuICAgICAgICAgIGlmIChMZWZ0IDw9IFJpZ2h0KSB7XHJcbiAgICAgICAgICAgIENvbnRpbnVlR2FtZShcclxuICAgICAgICAgICAgICAgIENhcnMsXHJcbiAgICAgICAgICAgICAgICBDYXJOYW1lTGFiZWwsXHJcbiAgICAgICAgICAgICAgICBDYXJBY2NMYWJlbCxcclxuICAgICAgICAgICAgICAgIFNsaWtlQXV0YSxcclxuICAgICAgICAgICAgICAgIEJyb2pBdXRhLFxyXG4gICAgICAgICAgICAgICAgQnJvalBvZW5hLFxyXG4gICAgICAgICAgICAgICAgSWdyYWNcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgRW5hYmxlT3JEaXNhYmxlQnV0dG9ucyhCdG5zKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIE1zZ01vZGFsLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgIFN0b3BBbmRSZXN0YXJ0KFxyXG4gICAgICAgICAgICAgICAgQ2FycyxcclxuICAgICAgICAgICAgICAgIENhck5hbWVMYWJlbCxcclxuICAgICAgICAgICAgICAgIENhckFjY0xhYmVsLFxyXG4gICAgICAgICAgICAgICAgU2xpa2VBdXRhLFxyXG4gICAgICAgICAgICAgICAgQnJvakF1dGEsXHJcbiAgICAgICAgICAgICAgICBCcm9qUG9lbmEsXHJcbiAgICAgICAgICAgICAgICBJZ3JhY1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBFbmFibGVPckRpc2FibGVCdXR0b25zKEJ0bnMpO1xyXG4gICAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBCdXR0b25UeXBlLk1hbmphOlxyXG4gICAgICAgICAgaWYgKExlZnQgPj0gUmlnaHQpIHtcclxuICAgICAgICAgICAgQ29udGludWVHYW1lKFxyXG4gICAgICAgICAgICAgICAgQ2FycyxcclxuICAgICAgICAgICAgICAgIENhck5hbWVMYWJlbCxcclxuICAgICAgICAgICAgICAgIENhckFjY0xhYmVsLFxyXG4gICAgICAgICAgICAgICAgU2xpa2VBdXRhLFxyXG4gICAgICAgICAgICAgICAgQnJvakF1dGEsXHJcbiAgICAgICAgICAgICAgICBCcm9qUG9lbmEsXHJcbiAgICAgICAgICAgICAgICBJZ3JhY1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBFbmFibGVPckRpc2FibGVCdXR0b25zKEJ0bnMpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgTXNnTW9kYWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgU3RvcEFuZFJlc3RhcnQoXHJcbiAgICAgICAgICAgICAgICBDYXJzLFxyXG4gICAgICAgICAgICAgICAgQ2FyTmFtZUxhYmVsLFxyXG4gICAgICAgICAgICAgICAgQ2FyQWNjTGFiZWwsXHJcbiAgICAgICAgICAgICAgICBTbGlrZUF1dGEsXHJcbiAgICAgICAgICAgICAgICBCcm9qQXV0YSxcclxuICAgICAgICAgICAgICAgIEJyb2pQb2VuYSxcclxuICAgICAgICAgICAgICAgIElncmFjXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIEVuYWJsZU9yRGlzYWJsZUJ1dHRvbnMoQnRucyk7XHJcbiAgXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCAxNTAwKTtcclxuICB9XHJcblxyXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBHZXROdW1iZXJPZkNhcnMoKSB7XHJcbiAgICBsZXQgQ2Fyc0xpc3Q6IEF1dG9bXSA9IFtdO1xyXG4gICAgQ2Fyc0xpc3QgPSBhd2FpdCBnZXRBbGxDYXJzKCk7XHJcbiAgICByZXR1cm4gQ2Fyc0xpc3QubGVuZ3RoO1xyXG4gIH1cclxuICBmdW5jdGlvbiBFbmFibGVPckRpc2FibGVCdXR0b25zKEJ0bkxpc3Q6IEhUTUxCdXR0b25FbGVtZW50W10pIHtcclxuICAgIEJ0bkxpc3QuZm9yRWFjaCgoQnV0dG9uKSA9PiAoQnV0dG9uLmhpZGRlbiA9ICFCdXR0b24uaGlkZGVuKSk7XHJcbiAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsKCkge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdPYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdvYmplY3QgdW5zdWJzY3JpYmVkJztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcy5tYXAiLCJpbXBvcnQge1xyXG4gICAgRHJhd0NhcnMsXHJcbiAgICBHZXROdW1iZXJPZkNhcnMsXHJcbiAgICBTb2x2ZVByb2JsZW0sXHJcbiAgfSBmcm9tIFwiLi9Mb2dpYy91dGlsaXRpZXNcIjtcclxuICBpbXBvcnQgeyBDbG9zZU1lc3NhZ2UsIFNldHVwQnV0dG9ucywgR2V0VXNlck5hbWUgfSBmcm9tIFwiLi9Mb2dpYy9vYnNlcnZhYmxlc1wiO1xyXG4gIGltcG9ydCB7IEF1dG8gfSBmcm9tIFwiLi9Nb2RlbHMvQXV0b1wiO1xyXG4gIGltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi9Nb2RlbHMvVXNlclwiO1xyXG4gIGltcG9ydCB7IFNpZGUgfSBmcm9tIFwiLi9FbnVtL1NpZGVFbnVtXCI7XHJcbiAgaW1wb3J0IHsgQnJvalBvZW5hIH0gZnJvbSBcIi4vRW51bS9Ccm9qUG9lbmFFbnVtXCI7XHJcbiAgaW1wb3J0IHsgQnV0dG9uVHlwZSB9IGZyb20gXCIuL0VudW0vQnV0dG9uRW51bVwiO1xyXG4gIC8vaW1wb3J0IHsgc2hvd1N0YXRzIH0gZnJvbSBcIi4vVmlldy9WaWV3XCI7XHJcbiAgaW1wb3J0IHsgU3ViamVjdCwgdGFrZVVudGlsIH0gZnJvbSBcInJ4anNcIjtcclxuIFxyXG4gIGV4cG9ydCBjb25zdCBCUk9KX0FLVElWTklIX0FVVEEgPSAyO1xyXG5cclxuICBjb25zdCBVbnN1YnNjcmliZSQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xyXG4gIFxyXG4gIGNvbnN0IENhck5hbWVMYWJlbDogSFRNTExhYmVsRWxlbWVudFtdID0gW107XHJcbiAgY29uc3QgQ2FyQWNjTGFiZWw6IEhUTUxMYWJlbEVsZW1lbnRbXSA9IFtdO1xyXG4gIGNvbnN0IEJyb2pQb2VuYUxhYmVsOiBIVE1MTGFiZWxFbGVtZW50W10gPSBbXTtcclxuICBjb25zdCBTbGlrZUF1dGE6IEhUTUxJbWFnZUVsZW1lbnRbXSA9IFtdO1xyXG4gIGNvbnN0IEJ0bnM6IEhUTUxCdXR0b25FbGVtZW50W10gPSBbXTtcclxuICBjb25zdCBDYXJzOiBBdXRvW10gPSBbXTtcclxuXHJcblxyXG5cclxuICBcclxuICBjb25zdCBVc2VyTmFtZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICBcIktJbWVcIlxyXG4gICkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICBcclxuICBjb25zdCBTdWJtaXRCdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICBcIkJ0blBvdHZyZGlcIlxyXG4gICkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblxyXG4gICAgXHJcbiAgY29uc3QgU3VibWl0QnV0dG9uRm9yTXNnOiBIVE1MQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgXCJCdG5Qb3R2cmRpTXNnXCJcclxuICApIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gIFxyXG4gIGNvbnN0IEFjdGl2ZU1vZGFsOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlNb2RhbFwiKTtcclxuXHJcbiAgY29uc3QgTXNnTW9kYWw6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteU1vZGFsTXNnXCIpO1xyXG5cclxuICBcclxuICBsZXQgSWdyYWM6IFVzZXI7XHJcbiAgbGV0IEJyb2pBdXRhOiBudW1iZXI7XHJcbiAgXHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIFNldEVsZW1lbnRzKCkge1xyXG4gICAgQ2FyTmFtZUxhYmVsW1NpZGUuTGV2YV0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgXCJBY2NOYW1lTFwiXHJcbiAgICApIGFzIEhUTUxMYWJlbEVsZW1lbnQ7XHJcbiAgXHJcbiAgICBDYXJOYW1lTGFiZWxbU2lkZS5EZXNuYV0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgXCJBY2NOYW1lUlwiXHJcbiAgICApIGFzIEhUTUxMYWJlbEVsZW1lbnQ7XHJcblxyXG4gIFxyXG4gICAgQ2FyQWNjTGFiZWxbU2lkZS5MZXZhXSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcIkFjY0xcIlxyXG4gICAgKSBhcyBIVE1MTGFiZWxFbGVtZW50O1xyXG4gIFxyXG4gICAgQ2FyQWNjTGFiZWxbU2lkZS5EZXNuYV0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgXCJBY2NSXCJcclxuICAgICkgYXMgSFRNTExhYmVsRWxlbWVudDtcclxuICBcclxuICAgIFNsaWtlQXV0YVtTaWRlLkxldmFdID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIFwicGhvdG9DYXJMXCJcclxuICAgICkgYXMgSFRNTEltYWdlRWxlbWVudDtcclxuICBcclxuICAgIFNsaWtlQXV0YVtTaWRlLkRlc25hXSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcInBob3RvQ2FyUlwiXHJcbiAgICApIGFzIEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICBcclxuXHJcbiAgICBCdG5zW0J1dHRvblR5cGUuVmVjYV0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgXCJidG4tdmVjYVwiXHJcbiAgICApIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gIFxyXG4gICAgQnRuc1tCdXR0b25UeXBlLk1hbmphXSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcImJ0bi1tYW5qYVwiXHJcbiAgICApIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gIFxyXG4gICAgQnJvalBvZW5hTGFiZWxbQnJvalBvZW5hLlRyZW51dG5pXSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcImJyUG9lbmFcIlxyXG4gICAgKSBhcyBIVE1MTGFiZWxFbGVtZW50O1xyXG4gIFxyXG4gICAgQnJvalBvZW5hTGFiZWxbQnJvalBvZW5hLk1heF0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgXCJtYXhQb2VuYVwiXHJcbiAgICApIGFzIEhUTUxMYWJlbEVsZW1lbnQ7XHJcblxyXG4gICAgXHJcbiAgICBCcm9qQXV0YSA9IGF3YWl0IEdldE51bWJlck9mQ2FycygpO1xyXG4gIFxyXG4gICBmb3IgKGxldCBpID0gMDsgaSA8IEJST0pfQUtUSVZOSUhfQVVUQTsgaSsrKSB7XHJcbiAgICAgICAgbGV0IG5ld0NhcjogQXV0bztcclxuICAgICAgICBDYXJzW2ldID0gbmV3Q2FyOyBcclxuICAgICAgfVxyXG4gIFxyXG4gICAgSWdyYWMgPSB7XHJcbiAgICAgIHNjb3JlOiAwLFxyXG4gICAgICBoaWdoU2NvcmU6IDAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gU2V0RGF0YSgpIHtcclxuXHJcbiAgICBNc2dNb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ1c2VybmFtZVwiKSA9PSBudWxsKSB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgICBBY3RpdmVNb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICBjb25zdCBJbnB1dE9icyQgPSBHZXRVc2VyTmFtZShVc2VyTmFtZUlucHV0LCBTdWJtaXRCdXR0b24pO1xyXG4gIFxyXG4gICAgICBJbnB1dE9icyQucGlwZSh0YWtlVW50aWwoVW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKCh1c2VybmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VybmFtZVwiLCB1c2VybmFtZSk7XHJcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidXNlcm5hbWVcIikgIT0gbnVsbCkge1xyXG4gICAgICAgICAgQWN0aXZlTW9kYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJVc2VyTmFtZVwiKS5pbm5lckhUTUwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJuYW1lXCIpO1xyXG4gICAgICAgICAgVW5zdWJzY3JpYmUkLm5leHQoKTtcclxuICAgICAgICAgIFVuc3Vic2NyaWJlJC5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2VcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJVc2VyTmFtZVwiKS5pbm5lckhUTUwgPVxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidXNlcm5hbWVcIik7XHJcbiAgXHJcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJIaWdoU2NvcmVcIikgIT0gbnVsbCkge1xyXG4gICAgICBJZ3JhYy5oaWdoU2NvcmUgPSBwYXJzZUludChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIkhpZ2hTY29yZVwiKSk7XHJcbiAgICAgIEJyb2pQb2VuYUxhYmVsW0Jyb2pQb2VuYS5NYXhdLmlubmVySFRNTCA9IElncmFjLmhpZ2hTY29yZS50b1N0cmluZygpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgTWVzc2FnZVN1Ym1pdEJ1dHRvbk9icyQgPSBDbG9zZU1lc3NhZ2UoU3VibWl0QnV0dG9uRm9yTXNnKTtcclxuICAgIE1lc3NhZ2VTdWJtaXRCdXR0b25PYnMkLnBpcGUoKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICBNc2dNb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICB3aW5kb3cub25sb2FkID0gYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgYXdhaXQgU2V0RWxlbWVudHMoKTtcclxuICAgIFNldERhdGEoKTtcclxuICAgIERyYXdDYXJzKENhcnMsIENhck5hbWVMYWJlbCwgQ2FyQWNjTGFiZWwsIFNsaWtlQXV0YSwgQnJvakF1dGEpO1xyXG4gICAgbGV0ICREdWdtZUV2ZW50ID0gU2V0dXBCdXR0b25zKEJ0bnMpO1xyXG5cclxuXHJcbiAgICAkRHVnbWVFdmVudFtCdXR0b25UeXBlLlZlY2FdLnN1YnNjcmliZShhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIFNvbHZlUHJvYmxlbShcclxuICAgICAgICBDYXJzW1NpZGUuTGV2YV0udnJlbWVBdXRhLFxyXG4gICAgICAgIENhcnNbU2lkZS5EZXNuYV0udnJlbWVBdXRhLFxyXG4gICAgICAgIENhcnMsXHJcbiAgICAgICAgQ2FyTmFtZUxhYmVsLFxyXG4gICAgICAgIENhckFjY0xhYmVsLFxyXG4gICAgICAgIFNsaWtlQXV0YSxcclxuICAgICAgICBCcm9qUG9lbmFMYWJlbCxcclxuICAgICAgICBCcm9qQXV0YSxcclxuICAgICAgICBJZ3JhYyxcclxuICAgICAgICBCdXR0b25UeXBlLlZlY2EsXHJcbiAgICAgICAgQnRucyxcclxuICAgICAgICBNc2dNb2RhbFxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJER1Z21lRXZlbnRbQnV0dG9uVHlwZS5NYW5qYV0uc3Vic2NyaWJlKGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBTb2x2ZVByb2JsZW0oXHJcbiAgICAgICAgICAgIENhcnNbU2lkZS5MZXZhXS52cmVtZUF1dGEsXHJcbiAgICAgICAgICAgIENhcnNbU2lkZS5EZXNuYV0udnJlbWVBdXRhLFxyXG4gICAgICAgICAgICBDYXJzLFxyXG4gICAgICAgICAgICBDYXJOYW1lTGFiZWwsXHJcbiAgICAgICAgICAgIENhckFjY0xhYmVsLFxyXG4gICAgICAgICAgICBTbGlrZUF1dGEsXHJcbiAgICAgICAgICAgIEJyb2pQb2VuYUxhYmVsLFxyXG4gICAgICAgICAgICBCcm9qQXV0YSxcclxuICAgICAgICAgICAgSWdyYWMsXHJcbiAgICAgICAgICAgIEJ1dHRvblR5cGUuTWFuamEsXHJcbiAgICAgICAgICAgIEJ0bnMsXHJcbiAgICAgICAgICAgIE1zZ01vZGFsXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgfTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4gIFxyXG5cclxuXHJcblxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gICBcclxuICAiLCJpbXBvcnQgeyBfX2V4dGVuZHMsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgRU1QVFlfU1VCU0NSSVBUSU9OIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIF90aGlzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQW5vbnltb3VzU3ViamVjdCh0aGlzLCB0aGlzKTtcbiAgICAgICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90aHJvd0lmQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY3VycmVudE9ic2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gQXJyYXkuZnJvbShfdGhpcy5vYnNlcnZlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKF90aGlzLmN1cnJlbnRPYnNlcnZlcnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhc0Vycm9yID0gX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN1YmplY3QucHJvdG90eXBlLCBcIm9ic2VydmVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IHRoaXMub2JzZXJ2ZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICB0aGlzLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5faW5uZXJTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQsIG9ic2VydmVycyA9IF9hLm9ic2VydmVycztcbiAgICAgICAgaWYgKGhhc0Vycm9yIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX1NVQlNDUklQVElPTjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBvYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgICAgICBhcnJSZW1vdmUob2JzZXJ2ZXJzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZDtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRocm93bkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdWJqZWN0IH07XG52YXIgQW5vbnltb3VzU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFub255bW91c1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdmFsdWUpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGVycik7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBFTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgfTtcbiAgICByZXR1cm4gQW5vbnltb3VzU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQW5vbnltb3VzU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlsL25vb3AnO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VVbnRpbChub3RpZmllcikge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgaW5uZXJGcm9tKG5vdGlmaWVyKS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSwgbm9vcCkpO1xuICAgICAgICAhc3Vic2NyaWJlci5jbG9zZWQgJiYgc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VVbnRpbC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBzd2l0Y2hNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQ29tcGxldGUgJiYgIWlubmVyU3Vic2NyaWJlciAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH07XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID09PSBudWxsIHx8IGlubmVyU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5uZXJTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB2YXIgaW5uZXJJbmRleCA9IDA7XG4gICAgICAgICAgICB2YXIgb3V0ZXJJbmRleCA9IGluZGV4Kys7XG4gICAgICAgICAgICBpbm5lckZyb20ocHJvamVjdCh2YWx1ZSwgb3V0ZXJJbmRleCkpLnN1YnNjcmliZSgoaW5uZXJTdWJzY3JpYmVyID0gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQocmVzdWx0U2VsZWN0b3IgPyByZXN1bHRTZWxlY3Rvcih2YWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCsrKSA6IGlubmVyVmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwLmpzLm1hcCIsImltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IHBvcFNjaGVkdWxlcihhcmdzKTtcbiAgICByZXR1cm4gZnJvbShhcmdzLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2YuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJCdXR0b25UeXBlIiwiU2lkZSIsIkJyb2pQb2VuYSIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19leHRlbmRzIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2dlbmVyYXRvciIsInRoaXNBcmciLCJib2R5IiwiZiIsInkiLCJ0IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwibmV4dCIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm4iLCJ2Iiwib3AiLCJkb25lIiwidmFsdWUiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiZSIsInN0ZXAiLCJfX3ZhbHVlcyIsIm8iLCJzIiwibSIsImkiLCJfX3JlYWQiLCJyIiwiYXIiLCJlcnJvciIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJwYWNrIiwiYXJndW1lbnRzIiwibCIsInNsaWNlIiwiY29uY2F0IiwiX19hd2FpdCIsIlN1cHByZXNzZWRFcnJvciIsImlzQXJyYXlMaWtlIiwieCIsImlzUHJvbWlzZSIsInRoZW4iLCJjcmVhdGVFcnJvckNsYXNzIiwiY3JlYXRlSW1wbCIsImN0b3JGdW5jIiwiaW5zdGFuY2UiLCJFcnJvciIsInN0YWNrIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsIl9zdXBlciIsImVycm9ycyIsIm1lc3NhZ2UiLCJtYXAiLCJlcnIiLCJ0b1N0cmluZyIsImpvaW4iLCJuYW1lIiwiYXJyUmVtb3ZlIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIlN1YnNjcmlwdGlvbiIsImluaXRpYWxUZWFyZG93biIsImNsb3NlZCIsIl9wYXJlbnRhZ2UiLCJfZmluYWxpemVycyIsInVuc3Vic2NyaWJlIiwiZV8xIiwiX2EiLCJlXzIiLCJfYiIsImlzQXJyYXkiLCJfcGFyZW50YWdlXzEiLCJfcGFyZW50YWdlXzFfMSIsInJlbW92ZSIsImVfMV8xIiwicmV0dXJuIiwiaW5pdGlhbEZpbmFsaXplciIsIl9maW5hbGl6ZXJzXzEiLCJfZmluYWxpemVyc18xXzEiLCJmaW5hbGl6ZXIiLCJleGVjRmluYWxpemVyIiwiZV8yXzEiLCJhZGQiLCJ0ZWFyZG93biIsIl9oYXNQYXJlbnQiLCJfYWRkUGFyZW50IiwicGFyZW50IiwiaW5jbHVkZXMiLCJfcmVtb3ZlUGFyZW50IiwiRU1QVFkiLCJlbXB0eSIsIkVNUFRZX1NVQlNDUklQVElPTiIsImlzU3Vic2NyaXB0aW9uIiwiY29uZmlnIiwib25VbmhhbmRsZWRFcnJvciIsIm9uU3RvcHBlZE5vdGlmaWNhdGlvbiIsIlByb21pc2UiLCJ1bmRlZmluZWQiLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwidXNlRGVwcmVjYXRlZE5leHRDb250ZXh0IiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsImhhbmRsZXIiLCJ0aW1lb3V0IiwiYXJncyIsIl9pIiwiZGVsZWdhdGUiLCJhcHBseSIsImNsZWFyVGltZW91dCIsImhhbmRsZSIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImtpbmQiLCJjb250ZXh0IiwiZXJyb3JDb250ZXh0IiwiY2IiLCJpc1Jvb3QiLCJlcnJvclRocm93biIsIlN1YnNjcmliZXIiLCJkZXN0aW5hdGlvbiIsIl90aGlzIiwiaXNTdG9wcGVkIiwiRU1QVFlfT0JTRVJWRVIiLCJjb21wbGV0ZSIsIlNhZmVTdWJzY3JpYmVyIiwiaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbiIsIm5leHROb3RpZmljYXRpb24iLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIl9iaW5kIiwiRnVuY3Rpb24iLCJiaW5kIiwiZm4iLCJDb25zdW1lck9ic2VydmVyIiwicGFydGlhbE9ic2VydmVyIiwiaGFuZGxlVW5oYW5kbGVkRXJyb3IiLCJvYnNlcnZlck9yTmV4dCIsImNvbnRleHRfMSIsIm5vdGlmaWNhdGlvbiIsInN1YnNjcmliZXIiLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJPYnNlcnZhYmxlIiwic3Vic2NyaWJlIiwiX3N1YnNjcmliZSIsImxpZnQiLCJvcGVyYXRvciIsInNvdXJjZSIsImlzT2JzZXJ2ZXIiLCJfdHJ5U3Vic2NyaWJlIiwic2luayIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJvcGVyYXRpb25zIiwiZm5zIiwiaW5wdXQiLCJyZWR1Y2UiLCJwcmV2IiwidG9Qcm9taXNlIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsImlzQXN5bmNJdGVyYWJsZSIsIm9iaiIsImFzeW5jSXRlcmF0b3IiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsImlzSXRlcmFibGUiLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwicmVhZGFibGVTdHJlYW0iLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwicSIsImEiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwic2hpZnQiLCJfX2FzeW5jR2VuZXJhdG9yIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZCIsInJlbGVhc2VMb2NrIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2UiLCJpbm5lckZyb20iLCJvYnMiLCJhcnJheSIsInByb21pc2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsIlAiLCJfX2FzeW5jVmFsdWVzIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJwcm9jZXNzIiwiY2F0Y2giLCJvcGVyYXRlIiwiaW5pdCIsImhhc0xpZnQiLCJsaWZ0ZWRTb3VyY2UiLCJjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIiLCJvbk5leHQiLCJvbkNvbXBsZXRlIiwib25FcnJvciIsIm9uRmluYWxpemUiLCJPcGVyYXRvclN1YnNjcmliZXIiLCJzaG91bGRVbnN1YnNjcmliZSIsImNsb3NlZF8xIiwicHJvamVjdCIsImV4ZWN1dGVTY2hlZHVsZSIsInBhcmVudFN1YnNjcmlwdGlvbiIsInNjaGVkdWxlciIsIndvcmsiLCJkZWxheSIsInJlcGVhdCIsInNjaGVkdWxlU3Vic2NyaXB0aW9uIiwic2NoZWR1bGUiLCJtZXJnZU1hcCIsInJlc3VsdFNlbGVjdG9yIiwiY29uY3VycmVudCIsIkluZmluaXR5IiwiaWkiLCJvbkJlZm9yZU5leHQiLCJleHBhbmQiLCJpbm5lclN1YlNjaGVkdWxlciIsImFkZGl0aW9uYWxGaW5hbGl6ZXIiLCJidWZmZXIiLCJhY3RpdmUiLCJpc0NvbXBsZXRlIiwiY2hlY2tDb21wbGV0ZSIsIm91dGVyTmV4dCIsImRvSW5uZXJTdWIiLCJpbm5lckNvbXBsZXRlIiwiaW5uZXJWYWx1ZSIsImJ1ZmZlcmVkVmFsdWUiLCJtZXJnZUludGVybmFscyIsIm5vZGVFdmVudEVtaXR0ZXJNZXRob2RzIiwiZXZlbnRUYXJnZXRNZXRob2RzIiwianF1ZXJ5TWV0aG9kcyIsImZyb21FdmVudCIsInRhcmdldCIsImV2ZW50TmFtZSIsIm9wdGlvbnMiLCJjYWxsT3JBcHBseSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNFdmVudFRhcmdldCIsIm1ldGhvZE5hbWUiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIiLCJ0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSIsIm9uIiwib2ZmIiwiaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlciIsInN1YlRhcmdldCIsImxhc3QiLCJwb3BTY2hlZHVsZXIiLCJvYnNlcnZlT24iLCJzdWJzY3JpYmVPbiIsInNjaGVkdWxlQXN5bmNJdGVyYWJsZSIsInNjaGVkdWxlT2JzZXJ2YWJsZSIsInNjaGVkdWxlQXJyYXkiLCJzY2hlZHVsZVByb21pc2UiLCJzY2hlZHVsZUl0ZXJhYmxlIiwic2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UiLCJzY2hlZHVsZWQiLCJtZXJnZSIsImRlZmF1bHRWYWx1ZSIsInBvcE51bWJlciIsInNvdXJjZXMiLCJtZXJnZUFsbCIsIkFjdGlvbiIsInN0YXRlIiwiaW50ZXJ2YWxQcm92aWRlciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIkFzeW5jQWN0aW9uIiwicGVuZGluZyIsImlkIiwicmVjeWNsZUFzeW5jSWQiLCJyZXF1ZXN0QXN5bmNJZCIsIl9pZCIsImZsdXNoIiwiX3NjaGVkdWxlciIsImV4ZWN1dGUiLCJfZXhlY3V0ZSIsIl9kZWxheSIsImVycm9yVmFsdWUiLCJlcnJvcmVkIiwiYWN0aW9ucyIsImRhdGVUaW1lc3RhbXBQcm92aWRlciIsIm5vdyIsIkRhdGUiLCJTY2hlZHVsZXIiLCJzY2hlZHVsZXJBY3Rpb25DdG9yIiwiYXN5bmNTY2hlZHVsZXIiLCJBc3luY1NjaGVkdWxlciIsIlNjaGVkdWxlckFjdGlvbiIsIl9hY3RpdmUiLCJhY3Rpb24iLCJkZWJvdW5jZVRpbWUiLCJkdWVUaW1lIiwiYWN0aXZlVGFzayIsImxhc3RWYWx1ZSIsImxhc3RUaW1lIiwiZW1pdCIsImVtaXRXaGVuSWRsZSIsInRhcmdldFRpbWUiLCJhcGkiLCJBUElfVVJMIiwiR2V0Q2FyIiwiQnJvakF1dGEiLCJJRCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImZldGNoIiwiQXV0b1BhY2thZ2UiLCJvayIsImpzb24iLCJjb25zb2xlIiwibG9nIiwiRm9ybWF0QWNjZWxlcmF0aW9uIiwiQWNjZWxlcmF0aW9uIiwiVW5Gb3JtYXR0ZWRSZXZlcnNlZCIsInNwbGl0IiwicmV2ZXJzZSIsIlRvQmVGb3JtYXR0ZWQiLCJyZXBsYWNlIiwiRHJhd0NhcnMiLCJDYXJzIiwiQ2FyTmFtZUxhYmVsIiwiQ2FyQWNjTGFiZWwiLCJTbGlrZUF1dGEiLCJpbWUiLCJMZXZhIiwiaW5uZXJIVE1MIiwidnJlbWVBdXRhIiwibmV3SW1hZ2VFbGVtZW50IiwiSW1hZ2UiLCJzcmMiLCJzbGlrYUF1dGEiLCJvbmxvYWQiLCJEZXNuYSIsInN0eWxlIiwidmlzaWJpbGl0eSIsIkNvbnRpbnVlR2FtZSIsIkJyb2pQb2VuYUxhYmVsIiwiSWdyYWMiLCJzY29yZSIsIlRyZW51dG5pIiwiQWNjZWxlcmF0aW9uQXJyYXkiLCJmaWx0ZXIiLCJmZXRjaE9icyIsIklEUHJ2b2dBdXRhIiwiSUREcnVnb2dBdXRhIiwiU2VhcmNoSUQiLCJHZXROZXdPbmUiLCJOZXdDYXIiLCJTdG9wQW5kUmVzdGFydCIsImhpZ2hTY29yZSIsIk1heCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJTb2x2ZVByb2JsZW0iLCJMZWZ0IiwiUmlnaHQiLCJCdXR0b25BY3RpdmF0ZWQiLCJCdG5zIiwiTXNnTW9kYWwiLCJFbmFibGVPckRpc2FibGVCdXR0b25zIiwiVmVjYSIsImRpc3BsYXkiLCJNYW5qYSIsIkdldE51bWJlck9mQ2FycyIsIkJ0bkxpc3QiLCJCdXR0b24iLCJoaWRkZW4iLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvciIsIlN1YmplY3QiLCJjdXJyZW50T2JzZXJ2ZXJzIiwib2JzZXJ2ZXJzIiwiaGFzRXJyb3IiLCJ0aHJvd25FcnJvciIsInN1YmplY3QiLCJBbm9ueW1vdXNTdWJqZWN0IiwiX3Rocm93SWZDbG9zZWQiLCJfYyIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzIiwiX2lubmVyU3Vic2NyaWJlIiwiYXNPYnNlcnZhYmxlIiwiVW5zdWJzY3JpYmUkIiwiVXNlck5hbWVJbnB1dCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJTdWJtaXRCdXR0b24iLCJTdWJtaXRCdXR0b25Gb3JNc2ciLCJBY3RpdmVNb2RhbCIsIlNldEVsZW1lbnRzIiwiU2V0RGF0YSIsIm5vdGlmaWVyIiwiZ2V0SXRlbSIsImNsZWFyIiwiSW5wdXQiLCJvZiIsImlubmVyU3Vic2NyaWJlciIsInByZWRpY2F0ZSIsIktvcmlzbmlja29JbWUiLCJHZXRVc2VyTmFtZSIsInVzZXJuYW1lIiwicGFyc2VJbnQiLCJNZXNzYWdlU3VibWl0QnV0dG9uT2JzJCIsIkNsb3NlTWVzc2FnZSIsIndpbmRvdyIsIiREdWdtZUV2ZW50IiwiJER1Z21lRXZlbnQxIiwiJER1Z21lRXZlbnQyIiwiJE1vYmlsZUV2ZW50MSIsIiRNb2JpbGVFdmVudDIiLCJPYnNBcnIkIiwiU2V0dXBCdXR0b25zIl0sInNvdXJjZVJvb3QiOiIifQ==